/* The following code was generated by JFlex 1.4.3 on 7/23/15 9:21 AM */

// java -jar lib/JFlex.jar src/ocaml/editor/newFormatter/ocaml.flex

// This lexer is a duplicate from ocaml.parser.ocaml.flex,
// but it generates the good symbols for OcamlFormatterParser

package ocaml.editor.newFormatter;

import java.util.Stack;

import beaver.Symbol;
import beaver.Scanner;

import ocaml.editor.newFormatter.OcamlFormatterParser.Terminals;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/23/15 9:21 AM from the specification file
 * <tt>ocaml.flex</tt>
 */
public class OcamlScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\33\1\2\1\0\1\3\1\1\22\0\1\33\1\104\1\31"+
    "\1\67\1\105\1\11\1\70\1\10\1\37\1\36\1\35\1\30\1\72"+
    "\1\73\1\25\1\11\1\12\1\24\6\21\2\7\1\63\1\75\1\76"+
    "\1\65\1\74\1\64\1\106\1\16\1\23\2\16\1\27\1\16\5\6"+
    "\1\66\2\6\1\20\10\6\1\14\2\6\1\77\1\32\1\101\1\106"+
    "\1\5\1\71\1\40\1\22\1\47\1\42\1\26\1\15\1\45\1\54"+
    "\1\46\1\60\1\4\1\50\1\57\1\41\1\17\1\52\1\4\1\44"+
    "\1\43\1\34\1\53\1\61\1\51\1\13\1\56\1\55\1\102\1\100"+
    "\1\103\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\5\3\2\1\10\1\2\1\11\1\12\1\2\1\13"+
    "\1\14\1\15\14\2\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\2\1\1\43\2\1\1\44\1\0\1\5\5\0\3\2"+
    "\1\45\1\2\1\46\2\2\1\47\3\2\1\50\1\51"+
    "\1\52\3\2\1\53\1\54\1\2\1\55\1\2\1\56"+
    "\3\2\1\57\1\60\20\2\1\0\1\61\1\62\1\63"+
    "\1\64\1\0\1\1\2\0\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
    "\1\40\4\1\1\0\1\101\1\102\1\44\1\0\1\103"+
    "\2\0\3\5\1\104\1\2\1\105\5\2\1\106\2\2"+
    "\1\107\2\2\1\110\1\2\1\53\1\111\3\2\1\112"+
    "\1\113\5\2\1\7\1\114\6\2\1\7\3\2\1\115"+
    "\1\2\1\116\1\117\4\0\3\2\1\120\3\2\1\121"+
    "\1\122\1\123\1\124\1\2\1\125\7\2\1\126\1\127"+
    "\1\130\7\2\1\131\2\2\1\132\11\2\1\133\1\134"+
    "\3\2\1\135\4\2\1\136\2\2\1\137\1\140\1\141"+
    "\5\2\1\142\1\143\2\2\1\144\4\2\1\145\1\146"+
    "\1\2\1\147\1\150\1\151\1\152\1\153\3\2\1\154"+
    "\3\2\1\155\1\156";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u0163\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u011c\0\u04b7\0\u04fe\0\u011c\0\u0545\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\u011c\0\u011c\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u011c\0\u0c34\0\u011c\0\u0c7b\0\u09b5\0\u0cc2\0\u011c"+
    "\0\u0d09\0\u0d50\0\u011c\0\u0d97\0\u0dde\0\u0e25\0\u0e6c\0\u011c"+
    "\0\u0eb3\0\u0efa\0\u0f41\0\u0f88\0\u0fcf\0\u1016\0\u105d\0\u10a4"+
    "\0\u0163\0\u10eb\0\u0163\0\u1132\0\u1179\0\u011c\0\u11c0\0\u1207"+
    "\0\u124e\0\u1295\0\u1295\0\u0163\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u011c\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2"+
    "\0\u0163\0\u15e9\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793"+
    "\0\u17da\0\u1821\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb"+
    "\0\u1a12\0\u1a59\0\u1aa0\0\u1ae7\0\u011c\0\u011c\0\u011c\0\u1b2e"+
    "\0\u1ae7\0\u1b75\0\u09fc\0\u09b5\0\u1295\0\u1295\0\u011c\0\u011c"+
    "\0\u09b5\0\u011c\0\u011c\0\u011c\0\u09b5\0\u011c\0\u011c\0\u1ae7"+
    "\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8\0\u011c\0\u011c\0\u1d1f"+
    "\0\u1d66\0\u011c\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9\0\u0163"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u20ba\0\u0163"+
    "\0\u2101\0\u2148\0\u0163\0\u218f\0\u21d6\0\u0163\0\u221d\0\u0163"+
    "\0\u0163\0\u2264\0\u22ab\0\u22f2\0\u0163\0\u0163\0\u2339\0\u2380"+
    "\0\u23c7\0\u240e\0\u2455\0\u0163\0\u0163\0\u249c\0\u24e3\0\u252a"+
    "\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d\0\u26d4\0\u271b\0\u0163"+
    "\0\u2762\0\u011c\0\u011c\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5"+
    "\0\u290c\0\u2953\0\u0163\0\u299a\0\u29e1\0\u2a28\0\u0163\0\u0163"+
    "\0\u0163\0\u0163\0\u2a6f\0\u0163\0\u2ab6\0\u2afd\0\u2b44\0\u2b8b"+
    "\0\u2bd2\0\u2c19\0\u2c60\0\u0163\0\u0163\0\u0163\0\u2ca7\0\u2cee"+
    "\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u0163\0\u2e98\0\u2edf"+
    "\0\u0163\0\u2f26\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0"+
    "\0\u3117\0\u315e\0\u0163\0\u0163\0\u31a5\0\u31ec\0\u3233\0\u0163"+
    "\0\u327a\0\u32c1\0\u3308\0\u334f\0\u0163\0\u3396\0\u33dd\0\u0163"+
    "\0\u0163\0\u0163\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u3540\0\u0163"+
    "\0\u0163\0\u3587\0\u35ce\0\u0163\0\u3615\0\u365c\0\u36a3\0\u36ea"+
    "\0\u0163\0\u0163\0\u3731\0\u0163\0\u0163\0\u0163\0\u0163\0\u0163"+
    "\0\u3778\0\u37bf\0\u3806\0\u0163\0\u384d\0\u3894\0\u38db\0\u0163"+
    "\0\u0163";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\6\1\10\1\15\1\10\1\16\1\10"+
    "\1\11\1\17\1\10\1\11\1\20\1\21\1\10\1\22"+
    "\1\23\1\0\1\5\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\6\1\35\1\36\1\37"+
    "\1\40\1\41\4\6\1\42\1\6\1\43\1\44\1\45"+
    "\1\46\1\47\1\10\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\5\1\4\27\5\1\70\1\71"+
    "\55\5\1\4\6\5\1\72\20\5\1\73\3\5\1\74"+
    "\1\5\1\75\47\5\2\0\1\5\217\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\24\0\5\10\1\0\13\10\1\0\2\10\4\0"+
    "\1\10\3\0\22\10\4\0\1\10\25\0\1\11\1\0"+
    "\1\11\2\0\1\11\6\0\1\11\2\0\1\11\1\76"+
    "\2\77\11\0\1\100\6\0\1\100\15\0\1\100\20\0"+
    "\1\101\2\0\5\101\1\0\21\101\1\102\54\101\11\0"+
    "\1\13\13\0\1\13\2\0\1\13\4\0\1\13\24\0"+
    "\4\13\2\0\1\13\2\0\2\13\1\0\1\13\1\0"+
    "\1\13\3\0\3\13\5\0\1\11\1\0\1\11\2\0"+
    "\1\11\2\103\2\0\2\104\1\11\2\105\1\11\1\76"+
    "\2\77\11\0\1\100\6\0\1\100\15\0\1\100\24\0"+
    "\5\6\1\0\5\6\1\106\5\6\1\0\2\6\4\0"+
    "\1\6\3\0\1\107\12\6\1\110\6\6\4\0\1\6"+
    "\24\0\5\6\1\0\3\6\1\111\4\6\1\112\2\6"+
    "\1\0\2\6\4\0\1\6\3\0\4\6\1\113\5\6"+
    "\1\114\7\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\1\115\1\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\45\0\1\116\65\0\5\6\1\0\1\6\1\117"+
    "\11\6\1\0\2\6\4\0\1\6\3\0\1\6\1\120"+
    "\6\6\1\121\11\6\4\0\1\6\31\0\1\122\13\0"+
    "\1\123\2\0\1\122\4\0\1\122\24\0\4\122\2\0"+
    "\1\122\2\0\2\122\1\0\1\122\1\0\1\122\3\0"+
    "\3\122\4\0\5\6\1\0\5\6\1\124\5\6\1\0"+
    "\2\6\4\0\1\6\3\0\4\6\1\125\7\6\1\126"+
    "\1\6\1\127\3\6\4\0\1\6\31\0\1\13\13\0"+
    "\1\13\2\0\1\13\4\0\1\130\24\0\4\13\2\0"+
    "\1\13\2\0\2\13\1\0\1\13\1\0\1\13\3\0"+
    "\3\13\35\0\1\131\55\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\1\6\1\132\1\6\1\133"+
    "\16\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\1\134\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\24\0\5\6\1\0\5\6\1\135\5\6\1\0\2\6"+
    "\4\0\1\6\3\0\22\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\136\3\0\6\6"+
    "\1\137\13\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\1\140\1\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\24\0\5\6\1\0\3\6\1\141\7\6\1\0"+
    "\2\6\4\0\1\6\3\0\1\6\1\142\20\6\4\0"+
    "\1\6\24\0\5\6\1\0\5\6\1\143\5\6\1\0"+
    "\2\6\4\0\1\6\3\0\10\6\1\144\11\6\4\0"+
    "\1\6\24\0\5\6\1\0\1\6\1\145\3\6\1\146"+
    "\5\6\1\0\1\147\1\6\4\0\1\6\3\0\1\150"+
    "\2\6\1\151\16\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\6\6\1\152"+
    "\5\6\1\153\5\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\4\6\1\154"+
    "\15\6\4\0\1\6\24\0\5\6\1\0\5\6\1\155"+
    "\5\6\1\0\1\156\1\6\4\0\1\6\3\0\1\157"+
    "\12\6\1\160\6\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\1\161\5\6"+
    "\1\162\13\6\4\0\1\6\24\0\2\163\3\0\1\164"+
    "\1\0\1\163\1\0\1\163\1\0\1\163\2\0\1\163"+
    "\2\0\1\164\1\163\1\0\1\164\3\0\1\163\1\164"+
    "\2\0\22\163\4\164\2\0\1\164\2\0\2\164\1\0"+
    "\1\164\1\0\1\164\3\0\3\164\63\0\1\165\1\0"+
    "\1\166\6\0\1\167\16\0\2\170\3\0\1\164\1\0"+
    "\1\170\1\0\1\170\1\0\1\170\2\0\1\170\2\0"+
    "\1\164\1\170\1\0\1\164\3\0\1\170\1\164\2\0"+
    "\22\170\2\164\1\171\1\164\2\0\1\164\2\0\2\164"+
    "\1\0\1\164\1\0\1\164\3\0\3\164\11\0\1\66"+
    "\13\0\1\66\2\0\1\66\4\0\1\66\24\0\4\66"+
    "\2\0\1\66\2\0\2\66\1\0\1\66\1\0\1\66"+
    "\3\0\3\66\7\0\1\172\2\0\1\172\6\0\1\172"+
    "\2\0\1\172\6\0\1\173\64\0\1\66\13\0\1\66"+
    "\2\0\1\66\4\0\1\66\24\0\4\66\2\0\1\174"+
    "\2\0\2\66\1\0\1\66\1\0\1\66\3\0\3\66"+
    "\11\0\1\122\13\0\1\175\2\0\1\122\4\0\1\122"+
    "\24\0\4\122\2\0\1\122\2\0\1\122\1\176\1\0"+
    "\1\122\1\0\1\122\3\0\3\122\11\0\1\66\13\0"+
    "\1\66\2\0\1\66\4\0\1\66\24\0\4\66\2\0"+
    "\1\66\2\0\2\66\1\0\1\66\1\0\1\66\2\0"+
    "\1\177\3\66\75\0\1\200\22\0\1\66\13\0\1\66"+
    "\2\0\1\66\4\0\1\66\24\0\4\66\2\0\1\66"+
    "\2\0\1\201\1\66\1\0\1\66\1\0\1\66\3\0"+
    "\3\66\74\0\1\202\1\0\1\203\1\0\1\204\17\0"+
    "\1\66\13\0\1\66\2\0\1\66\4\0\1\66\24\0"+
    "\4\66\2\0\1\66\2\0\2\66\1\0\1\66\1\0"+
    "\1\205\1\206\2\0\3\66\76\0\1\207\21\0\1\164"+
    "\13\0\1\164\2\0\1\164\4\0\1\164\24\0\3\164"+
    "\1\210\2\0\1\164\2\0\2\164\1\0\1\164\1\0"+
    "\1\164\3\0\3\164\11\0\1\67\13\0\1\67\2\0"+
    "\1\67\4\0\1\67\24\0\4\67\2\0\1\67\2\0"+
    "\2\67\1\0\1\67\1\0\1\67\3\0\3\67\1\5"+
    "\1\211\1\212\4\5\1\213\2\5\1\213\1\214\5\5"+
    "\1\213\2\5\1\213\62\5\31\0\1\215\113\0\1\216"+
    "\105\0\1\217\56\0\1\76\1\0\1\76\2\0\1\76"+
    "\6\0\1\76\2\0\1\76\1\0\2\77\66\0\1\220"+
    "\2\0\1\220\6\0\1\220\2\0\1\220\3\0\1\221"+
    "\42\0\1\221\23\0\1\222\105\0\1\223\1\101\1\0"+
    "\1\223\1\224\5\0\1\223\1\101\1\0\1\223\4\0"+
    "\2\101\1\0\1\101\4\0\1\101\2\0\1\101\51\0"+
    "\1\225\2\0\1\225\2\0\2\225\2\0\4\225\1\0"+
    "\2\225\10\0\1\225\1\0\1\225\4\0\1\225\51\0"+
    "\1\226\6\0\1\226\2\0\1\226\74\0\1\227\11\0"+
    "\1\227\66\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\4\6\1\230\15\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\10\6\1\231\11\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\1\6\1\232"+
    "\20\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\20\6\1\233\1\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\1\234\1\6"+
    "\4\0\1\6\3\0\22\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\5\6"+
    "\1\235\14\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\236\3\0\7\6\1\237\12\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\2\6\1\240\17\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\3\6\1\241\16\6\4\0\1\6\31\0\1\122"+
    "\13\0\1\122\2\0\1\122\4\0\1\122\24\0\4\122"+
    "\2\0\1\122\2\0\2\122\1\0\1\122\1\0\1\122"+
    "\3\0\3\122\4\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\13\6\1\242\2\6\1\243\3\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\1\244"+
    "\1\6\4\0\1\6\3\0\22\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\12\6\1\245\7\6\4\0\1\6\31\0\1\130\13\0"+
    "\1\130\2\0\1\130\4\0\1\130\24\0\4\130\2\0"+
    "\1\130\2\0\2\130\1\0\1\130\1\0\1\130\3\0"+
    "\3\130\4\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\2\6\1\246\17\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\3\6\1\247\1\250\15\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\11\6"+
    "\1\251\10\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\1\6\1\252\7\6"+
    "\1\253\10\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\4\6\1\254\15\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\5\6\1\255\14\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\7\6\1\256\12\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\6\6"+
    "\1\257\1\260\4\6\1\261\5\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\1\6\1\262\20\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\1\263\21\6"+
    "\4\0\1\6\24\0\5\6\1\0\5\6\1\146\5\6"+
    "\1\0\2\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\4\6\1\264\15\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\265\3\0\22\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\1\6\1\266\13\6\1\267\4\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\4\6\1\250\3\6\1\250\11\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\270\3\0\22\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\1\271\1\6\4\0\1\6\3\0"+
    "\6\6\1\272\13\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\6\6\1\273"+
    "\13\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\2\6\1\274\17\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\275\3\0\22\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\276\3\0\22\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\277\3\0\22\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\10\6\1\300"+
    "\11\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\4\6\1\301\15\6\4\0"+
    "\1\6\24\0\5\163\1\0\13\163\1\0\2\163\4\0"+
    "\1\163\3\0\22\163\1\0\1\302\2\0\1\163\31\0"+
    "\1\164\13\0\1\164\2\0\1\164\4\0\1\164\24\0"+
    "\4\164\2\0\1\164\2\0\2\164\1\0\1\164\1\0"+
    "\1\164\3\0\3\164\4\0\5\170\1\0\13\170\1\0"+
    "\2\170\4\0\1\170\3\0\22\170\1\0\1\303\2\0"+
    "\1\170\20\0\1\172\1\4\1\5\104\172\2\0\1\212"+
    "\30\0\1\212\106\0\1\212\62\0\1\304\2\0\1\304"+
    "\6\0\1\304\2\0\1\304\71\0\1\305\2\0\1\305"+
    "\2\0\2\305\2\0\4\305\1\0\2\305\10\0\1\305"+
    "\1\0\1\305\4\0\1\305\47\0\1\5\103\0\1\220"+
    "\1\0\1\220\2\0\1\220\6\0\1\220\2\0\1\220"+
    "\71\0\1\220\2\0\1\220\6\0\1\220\2\0\1\220"+
    "\71\0\1\306\2\0\1\306\6\0\1\306\2\0\1\306"+
    "\71\0\1\307\2\0\1\307\2\0\2\307\2\0\4\307"+
    "\1\0\2\307\10\0\1\307\1\0\1\307\4\0\1\307"+
    "\44\0\1\225\1\0\1\225\2\0\1\225\2\0\2\225"+
    "\2\0\4\225\1\0\2\225\10\0\1\225\1\100\1\225"+
    "\4\0\1\225\1\100\15\0\1\100\25\0\1\226\4\0"+
    "\1\226\6\0\1\226\2\0\1\226\14\0\1\100\6\0"+
    "\1\100\15\0\1\100\25\0\1\227\4\0\1\227\11\0"+
    "\1\227\14\0\1\100\6\0\1\100\15\0\1\100\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\3\6\1\310\16\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\7\6\1\311"+
    "\12\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\1\312\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\1\6\1\313\20\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\6\6"+
    "\1\314\13\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\1\315\1\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\1\316\1\6"+
    "\4\0\1\6\3\0\22\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\1\317\1\6\4\0\1\6\3\0"+
    "\22\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\1\320\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\1\6\1\321\20\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\1\322\1\6\4\0\1\6\3\0"+
    "\22\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\1\323\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\1\324\1\6\4\0"+
    "\1\6\3\0\22\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\1\6\1\325"+
    "\20\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\13\6\1\326\6\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\327\3\0\22\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\10\6\1\330"+
    "\11\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\1\331\1\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\3\6\1\332\16\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\3\6"+
    "\1\333\16\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\2\6\1\264\17\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\16\6\1\334\3\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\14\6\1\335\5\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\1\6"+
    "\1\336\20\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\10\6\1\337\11\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\21\6\1\340\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\13\6\1\341\6\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\14\6\1\342"+
    "\5\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\7\6\1\343\12\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\1\344\21\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\345\3\0\22\6"+
    "\4\0\1\6\27\0\1\5\2\0\1\5\6\0\1\5"+
    "\2\0\1\5\71\0\1\5\2\0\1\5\2\0\2\5"+
    "\2\0\4\5\1\0\2\5\10\0\1\5\1\0\1\5"+
    "\4\0\1\5\46\0\1\101\2\0\1\101\6\0\1\101"+
    "\2\0\1\101\71\0\1\101\2\0\1\101\2\0\2\101"+
    "\2\0\4\101\1\0\2\101\10\0\1\101\1\0\1\101"+
    "\4\0\1\101\43\0\5\6\1\0\13\6\1\0\1\346"+
    "\1\6\4\0\1\6\3\0\22\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\347\3\0"+
    "\22\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\7\6\1\350\12\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\1\6\1\351\20\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\4\6\1\352\15\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\12\6\1\353"+
    "\7\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\4\6\1\354\15\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\355\3\0\22\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\7\6\1\356"+
    "\12\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\6\6\1\357\13\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\13\6\1\360\6\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\4\6\1\361\15\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\362\3\0\22\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\3\6\1\363\16\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\1\364\1\6\4\0\1\6"+
    "\3\0\22\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\1\365\21\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\10\6\1\366\11\6\4\0\1\6\24\0"+
    "\5\6\1\0\5\6\1\367\5\6\1\0\2\6\4\0"+
    "\1\6\3\0\22\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\14\6\1\370"+
    "\5\6\4\0\1\6\24\0\5\6\1\0\10\6\1\371"+
    "\2\6\1\0\2\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\13\6\1\372\6\6\4\0\1\6\24\0"+
    "\5\6\1\0\5\6\1\373\5\6\1\0\2\6\4\0"+
    "\1\6\3\0\6\6\1\374\13\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\375\3\0"+
    "\22\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\1\6\1\376\20\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\377\3\0\22\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\u0100\3\0\22\6\4\0"+
    "\1\6\24\0\5\6\1\0\5\6\1\u0101\5\6\1\0"+
    "\2\6\4\0\1\6\3\0\22\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\u0102\3\0"+
    "\22\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\1\u0103\21\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\2\6\1\u0104\17\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\6\3\0\6\6"+
    "\1\u0105\13\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\4\6\1\u0106\15\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\u0107\3\0\22\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\1\u0108\1\6\4\0\1\6\3\0"+
    "\22\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\2\6\1\u0109\17\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\10\6\1\u010a\11\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\1\u010b\21\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\6\3\0\4\6\1\u010c\15\6"+
    "\4\0\1\6\24\0\5\6\1\0\5\6\1\u010d\5\6"+
    "\1\0\2\6\4\0\1\6\3\0\22\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\1\u010e\21\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\6\6\1\u010f"+
    "\13\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\10\6\1\u0110\11\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\1\u0111\1\6"+
    "\4\0\1\6\3\0\22\6\4\0\1\6\24\0\5\6"+
    "\1\0\13\6\1\0\2\6\4\0\1\u0112\3\0\22\6"+
    "\4\0\1\6\24\0\5\6\1\0\13\6\1\0\2\6"+
    "\4\0\1\6\3\0\1\u0113\21\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\1\u0114\1\6\4\0\1\6"+
    "\3\0\22\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\1\u0115\1\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\10\6\1\u0116\11\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\1\6\1\u0117\20\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\10\6\1\u0118"+
    "\11\6\4\0\1\6\24\0\5\6\1\0\5\6\1\u0119"+
    "\5\6\1\0\2\6\4\0\1\6\3\0\22\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\6\6\1\u011a\13\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\2\6\4\0\1\6\3\0"+
    "\6\6\1\u011b\13\6\4\0\1\6\24\0\5\6\1\0"+
    "\13\6\1\0\2\6\4\0\1\6\3\0\1\6\1\u011c"+
    "\20\6\4\0\1\6\24\0\5\6\1\0\13\6\1\0"+
    "\2\6\4\0\1\6\3\0\15\6\1\u011d\4\6\4\0"+
    "\1\6\24\0\5\6\1\0\13\6\1\0\2\6\4\0"+
    "\1\6\3\0\1\6\1\u011e\20\6\4\0\1\6\24\0"+
    "\5\6\1\0\13\6\1\0\1\u011f\1\6\4\0\1\6"+
    "\3\0\22\6\4\0\1\6\24\0\5\6\1\0\13\6"+
    "\1\0\2\6\4\0\1\u0120\3\0\22\6\4\0\1\6"+
    "\24\0\5\6\1\0\13\6\1\0\2\6\4\0\1\6"+
    "\3\0\4\6\1\u0121\15\6\4\0\1\6\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14626];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\1\1\11\15\1\1\11\2\1\1\11\23\1"+
    "\2\11\6\1\1\11\1\1\1\11\3\1\1\11\2\1"+
    "\1\11\3\1\1\0\1\11\5\0\10\1\1\11\12\1"+
    "\1\11\31\1\1\0\1\1\3\11\1\0\1\1\2\0"+
    "\3\1\2\11\1\1\3\11\1\1\2\11\5\1\1\0"+
    "\2\11\1\1\1\0\1\11\2\0\55\1\2\11\4\0"+
    "\132\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	int stringLineStart = 0;
	int stringColumnStart = 0;
	
	enum eStringsComments{IN_INITIAL, IN_STRING, IN_COMMENT};
	Stack<eStringsComments> stackStringsComments = new Stack<eStringsComments>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OcamlScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public OcamlScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 66: 
          { stackStringsComments.push(eStringsComments.IN_COMMENT); yybegin(COMMENT);
          }
        case 111: break;
        case 68: 
          { return new Symbol(Terminals.FOR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 112: break;
        case 79: 
          { return new Symbol(Terminals.OPTLABEL, yyline, yycolumn, yytext().length(), yytext().substring(1,yylength()-1));
          }
        case 113: break;
        case 99: 
          { return new Symbol(Terminals.METHOD, yyline, yycolumn, yytext().length(), yytext());
          }
        case 114: break;
        case 77: 
          { return new Symbol(Terminals.VAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 115: break;
        case 36: 
          { return new Symbol(Terminals.FLOAT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 116: break;
        case 92: 
          { return new Symbol(Terminals.WHILE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 117: break;
        case 71: 
          { return new Symbol(Terminals.TRY, yyline, yycolumn, yytext().length(), yytext());
          }
        case 118: break;
        case 98: 
          { return new Symbol(Terminals.MODULE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 119: break;
        case 14: 
          { return new Symbol(Terminals.TILDE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 120: break;
        case 102: 
          { return new Symbol(Terminals.INHERIT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 121: break;
        case 55: 
          { return new Symbol(Terminals.MINUSGREATER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 122: break;
        case 108: 
          { return new Symbol(Terminals.EXCEPTION, yyline, yycolumn, yytext().length(), yytext());
          }
        case 123: break;
        case 96: 
          { return new Symbol(Terminals.DOWNTO, yyline, yycolumn, yytext().length(), yytext());
          }
        case 124: break;
        case 29: 
          { return new Symbol(Terminals.LBRACE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 125: break;
        case 58: 
          { return new Symbol(Terminals.LESSMINUS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 126: break;
        case 33: 
          { return new Symbol(Terminals.INFIXOP1, yyline, yycolumn, yytext().length(), yytext());
          }
        case 127: break;
        case 31: 
          { return new Symbol(Terminals.BANG, yyline, yycolumn, yytext().length(), yytext());
          }
        case 128: break;
        case 15: 
          { return new Symbol(Terminals.COLON, yyline, yycolumn, yytext().length(), yytext());
          }
        case 129: break;
        case 24: 
          { return new Symbol(Terminals.SEMI, yyline, yycolumn, yytext().length(), yytext());
          }
        case 130: break;
        case 67: 
          { return new Symbol(Terminals.CHAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 131: break;
        case 56: 
          { return new Symbol(Terminals.GREATERRBRACE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 132: break;
        case 104: 
          { return new Symbol(Terminals.MUTABLE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 133: break;
        case 20: 
          { return new Symbol(Terminals.BACKQUOTE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 134: break;
        case 30: 
          { return new Symbol(Terminals.RBRACE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 135: break;
        case 9: 
          { return new Symbol(Terminals.PLUS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 136: break;
        case 34: 
          { eStringsComments type = stackStringsComments.pop();
    	if(type == eStringsComments.IN_COMMENT)
    		yybegin(COMMENT);
    	else if(type == eStringsComments.IN_INITIAL){
    		yybegin(YYINITIAL);
    		
    		return new Symbol(Terminals.STRING, stringLineStart, stringColumnStart, 2, "\"\"");
    	}
          }
        case 137: break;
        case 27: 
          { return new Symbol(Terminals.BAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 138: break;
        case 8: 
          { return new Symbol(Terminals.DOT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 139: break;
        case 72: 
          { return new Symbol(Terminals.AND, yyline, yycolumn, yytext().length(), yytext());
          }
        case 140: break;
        case 59: 
          { return new Symbol(Terminals.LBRACKETGREATER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 141: break;
        case 41: 
          { return new Symbol(Terminals.PLUSDOT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 142: break;
        case 54: 
          { return new Symbol(Terminals.MINUSDOT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 143: break;
        case 4: 
          { return new Symbol(Terminals.UIDENT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 144: break;
        case 16: 
          { return new Symbol(Terminals.QUESTION, yyline, yycolumn, yytext().length(), yytext());
          }
        case 145: break;
        case 43: 
          { return new Symbol(Terminals.INFIXOP4, yyline, yycolumn, yytext().length(), yytext());
          }
        case 146: break;
        case 22: 
          { return new Symbol(Terminals.MINUS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 147: break;
        case 2: 
          { return new Symbol(Terminals.LIDENT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 148: break;
        case 47: 
          { return new Symbol(Terminals.IF, yyline, yycolumn, yytext().length(), yytext());
          }
        case 149: break;
        case 51: 
          { return new Symbol(Terminals.COLONEQUAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 150: break;
        case 25: 
          { return new Symbol(Terminals.LESS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 151: break;
        case 28: 
          { return new Symbol(Terminals.RBRACKET, yyline, yycolumn, yytext().length(), yytext());
          }
        case 152: break;
        case 107: 
          { return new Symbol(Terminals.EXTERNAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 153: break;
        case 18: 
          { return new Symbol(Terminals.SHARP, yyline, yycolumn, yytext().length(), yytext());
          }
        case 154: break;
        case 11: 
          { return new Symbol(Terminals.STAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 155: break;
        case 60: 
          { return new Symbol(Terminals.LBRACKETLESS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 156: break;
        case 35: 
          { stackStringsComments.push(eStringsComments.IN_COMMENT); yybegin(STRING);
          }
        case 157: break;
        case 62: 
          { return new Symbol(Terminals.BARBAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 158: break;
        case 78: 
          { return new Symbol(Terminals.LABEL, yyline, yycolumn, yytext().length(), yytext().substring(1,yylength()-1));
          }
        case 159: break;
        case 6: 
          { return new Symbol(Terminals.QUOTE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 160: break;
        case 5: 
          { return new Symbol(Terminals.INT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 161: break;
        case 85: 
          { return new Symbol(Terminals.DONE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 162: break;
        case 10: 
          { stringLineStart = yyline;
    	stringColumnStart = yycolumn;
    	stackStringsComments.push(eStringsComments.IN_INITIAL); 
    	yybegin(STRING);
          }
        case 163: break;
        case 63: 
          { return new Symbol(Terminals.BARRBRACKET, yyline, yycolumn, yytext().length(), yytext());
          }
        case 164: break;
        case 53: 
          { return new Symbol(Terminals.AMPERAMPER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 165: break;
        case 97: 
          { return new Symbol(Terminals.STRUCT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 166: break;
        case 57: 
          { return new Symbol(Terminals.SEMISEMI, yyline, yycolumn, yytext().length(), yytext());
          }
        case 167: break;
        case 45: 
          { return new Symbol(Terminals.AS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 168: break;
        case 39: 
          { return new Symbol(Terminals.DOTDOT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 169: break;
        case 40: 
          { return new Symbol(Terminals.INFIXOP2, yyline, yycolumn, yytext().length(), yytext());
          }
        case 170: break;
        case 100: 
          { return new Symbol(Terminals.FUNCTOR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 171: break;
        case 46: 
          { return new Symbol(Terminals.DO, yyline, yycolumn, yytext().length(), yytext());
          }
        case 172: break;
        case 52: 
          { return new Symbol(Terminals.COLONGREATER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 173: break;
        case 44: 
          { stackStringsComments.push(eStringsComments.IN_INITIAL); yybegin(COMMENT);
          }
        case 174: break;
        case 82: 
          { return new Symbol(Terminals.TRUE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 175: break;
        case 105: 
          { return new Symbol(Terminals.VIRTUAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 176: break;
        case 70: 
          { return new Symbol(Terminals.END, yyline, yycolumn, yytext().length(), yytext());
          }
        case 177: break;
        case 26: 
          { return new Symbol(Terminals.LBRACKET, yyline, yycolumn, yytext().length(), yytext());
          }
        case 178: break;
        case 87: 
          { return new Symbol(Terminals.WITH, yyline, yycolumn, yytext().length(), yytext());
          }
        case 179: break;
        case 64: 
          { return new Symbol(Terminals.LBRACELESS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 180: break;
        case 101: 
          { return new Symbol(Terminals.INCLUDE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 181: break;
        case 37: 
          { return new Symbol(Terminals.OF, yyline, yycolumn, yytext().length(), yytext());
          }
        case 182: break;
        case 80: 
          { return new Symbol(Terminals.OPEN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 183: break;
        case 73: 
          { return new Symbol(Terminals.NEW, yyline, yycolumn, yytext().length(), yytext());
          }
        case 184: break;
        case 48: 
          { return new Symbol(Terminals.IN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 185: break;
        case 19: 
          { return new Symbol(Terminals.AMPERSAND, yyline, yycolumn, yytext().length(), yytext());
          }
        case 186: break;
        case 38: 
          { return new Symbol(Terminals.OR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 187: break;
        case 75: 
          { return new Symbol(Terminals.REC, yyline, yycolumn, yytext().length(), yytext());
          }
        case 188: break;
        case 32: 
          { return new Symbol(Terminals.INFIXOP0, yyline, yycolumn, yytext().length(), yytext());
          }
        case 189: break;
        case 50: 
          { return new Symbol(Terminals.COLONCOLON, yyline, yycolumn, yytext().length(), yytext());
          }
        case 190: break;
        case 83: 
          { return new Symbol(Terminals.THEN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 191: break;
        case 95: 
          { return new Symbol(Terminals.ASSERT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 192: break;
        case 89: 
          { return new Symbol(Terminals.FALSE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 193: break;
        case 74: 
          { return new Symbol(Terminals.SIG, yyline, yycolumn, yytext().length(), yytext());
          }
        case 194: break;
        case 81: 
          { return new Symbol(Terminals.ELSE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 195: break;
        case 93: 
          { return new Symbol(Terminals.MATCH, yyline, yycolumn, yytext().length(), yytext());
          }
        case 196: break;
        case 86: 
          { return new Symbol(Terminals.LAZY, yyline, yycolumn, yytext().length(), yytext());
          }
        case 197: break;
        case 88: 
          { return new Symbol(Terminals.WHEN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 198: break;
        case 69: 
          { return new Symbol(Terminals.FUN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 199: break;
        case 91: 
          { return new Symbol(Terminals.CLASS, yyline, yycolumn, yytext().length(), yytext());
          }
        case 200: break;
        case 21: 
          { return new Symbol(Terminals.COMMA, yyline, yycolumn, yytext().length(), yytext());
          }
        case 201: break;
        case 90: 
          { return new Symbol(Terminals.BEGIN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 202: break;
        case 17: 
          { return new Symbol(Terminals.EQUAL, yyline, yycolumn, yytext().length(), yytext());
          }
        case 203: break;
        case 49: 
          { return new Symbol(Terminals.PREFIXOP, yyline, yycolumn, yytext().length(), yytext());
          }
        case 204: break;
        case 12: 
          { return new Symbol(Terminals.RPAREN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 205: break;
        case 76: 
          { return new Symbol(Terminals.LET, yyline, yycolumn, yytext().length(), yytext());
          }
        case 206: break;
        case 13: 
          { return new Symbol(Terminals.LPAREN, yyline, yycolumn, yytext().length(), yytext());
          }
        case 207: break;
        case 3: 
          { return new Symbol(Terminals.UNDERSCORE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 208: break;
        case 84: 
          { return new Symbol(Terminals.TYPE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 209: break;
        case 23: 
          { return new Symbol(Terminals.GREATER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 210: break;
        case 7: 
          { return new Symbol(Terminals.INFIXOP3, yyline, yycolumn, yytext().length(), yytext());
          }
        case 211: break;
        case 42: 
          { return new Symbol(Terminals.TO, yyline, yycolumn, yytext().length(), yytext());
          }
        case 212: break;
        case 61: 
          { return new Symbol(Terminals.LBRACKETBAR, yyline, yycolumn, yytext().length(), yytext());
          }
        case 213: break;
        case 110: 
          { return new Symbol(Terminals.INITIALIZER, yyline, yycolumn, yytext().length(), yytext());
          }
        case 214: break;
        case 106: 
          { return new Symbol(Terminals.FUNCTION, yyline, yycolumn, yytext().length(), yytext());
          }
        case 215: break;
        case 103: 
          { return new Symbol(Terminals.PRIVATE, yyline, yycolumn, yytext().length(), yytext());
          }
        case 216: break;
        case 94: 
          { return new Symbol(Terminals.OBJECT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 217: break;
        case 65: 
          { eStringsComments type = stackStringsComments.pop();
    	if(type == eStringsComments.IN_COMMENT)
    		yybegin(COMMENT);
    	else
    		yybegin(YYINITIAL);
    		
    	//return new Symbol(Terminals.STRING);
          }
        case 218: break;
        case 109: 
          { return new Symbol(Terminals.CONSTRAINT, yyline, yycolumn, yytext().length(), yytext());
          }
        case 219: break;
        case 1: 
          { 
          }
        case 220: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return new Symbol(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
