package ocaml.editor.newFormatter;

import ocaml.parser.ErrorReporting;
import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "OcamlFormatterParser.g".
 */
public class OcamlFormatterParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short LIDENT = 1;
		static public final short UIDENT = 2;
		static public final short LPAREN = 3;
		static public final short LBRACKET = 4;
		static public final short MINUS = 5;
		static public final short PLUS = 6;
		static public final short BACKQUOTE = 7;
		static public final short FALSE = 8;
		static public final short TRUE = 9;
		static public final short INT = 10;
		static public final short LBRACE = 11;
		static public final short FLOAT = 12;
		static public final short INT32 = 13;
		static public final short INT64 = 14;
		static public final short NATIVEINT = 15;
		static public final short STRING = 16;
		static public final short CHAR = 17;
		static public final short SHARP = 18;
		static public final short LBRACKETBAR = 19;
		static public final short PLUSDOT = 20;
		static public final short MINUSDOT = 21;
		static public final short UNDERSCORE = 22;
		static public final short LAZY = 23;
		static public final short LESS = 24;
		static public final short BANG = 25;
		static public final short PREFIXOP = 26;
		static public final short LET = 27;
		static public final short OBJECT = 28;
		static public final short BEGIN = 29;
		static public final short LBRACELESS = 30;
		static public final short NEW = 31;
		static public final short FUN = 32;
		static public final short QUOTE = 33;
		static public final short RPAREN = 34;
		static public final short FOR = 35;
		static public final short IF = 36;
		static public final short WHILE = 37;
		static public final short MATCH = 38;
		static public final short TRY = 39;
		static public final short FUNCTION = 40;
		static public final short ASSERT = 41;
		static public final short QUESTION = 42;
		static public final short EQUAL = 43;
		static public final short OPTLABEL = 44;
		static public final short LBRACKETGREATER = 45;
		static public final short LBRACKETLESS = 46;
		static public final short COLONCOLON = 47;
		static public final short STAR = 48;
		static public final short INFIXOP4 = 49;
		static public final short COLON = 50;
		static public final short INFIXOP3 = 51;
		static public final short GREATER = 52;
		static public final short MODULE = 53;
		static public final short INFIXOP2 = 54;
		static public final short INFIXOP1 = 55;
		static public final short COMMA = 56;
		static public final short AMPERSAND = 57;
		static public final short INFIXOP0 = 58;
		static public final short AMPERAMPER = 59;
		static public final short BAR = 60;
		static public final short DOT = 61;
		static public final short OR = 62;
		static public final short BARBAR = 63;
		static public final short TYPE = 64;
		static public final short COLONEQUAL = 65;
		static public final short MINUSGREATER = 66;
		static public final short FUNCTOR = 67;
		static public final short RBRACE = 68;
		static public final short OPEN = 69;
		static public final short RBRACKET = 70;
		static public final short EXTERNAL = 71;
		static public final short EXCEPTION = 72;
		static public final short CLASS = 73;
		static public final short SEMISEMI = 74;
		static public final short INCLUDE = 75;
		static public final short WITH = 76;
		static public final short TILDE = 77;
		static public final short LABEL = 78;
		static public final short VIRTUAL = 79;
		static public final short SEMI = 80;
		static public final short SIG = 81;
		static public final short AND = 82;
		static public final short AS = 83;
		static public final short END = 84;
		static public final short STRUCT = 85;
		static public final short PRIVATE = 86;
		static public final short MUTABLE = 87;
		static public final short LESSMINUS = 88;
		static public final short REC = 89;
		static public final short BARRBRACKET = 90;
		static public final short WHEN = 91;
		static public final short COLONGREATER = 92;
		static public final short VAL = 93;
		static public final short IN = 94;
		static public final short OF = 95;
		static public final short GREATERRBRACE = 96;
		static public final short CONSTRAINT = 97;
		static public final short DOTDOT = 98;
		static public final short METHOD = 99;
		static public final short DO = 100;
		static public final short DONE = 101;
		static public final short INHERIT = 102;
		static public final short THEN = 103;
		static public final short ELSE = 104;
		static public final short INITIALIZER = 108;
		static public final short TO = 109;
		static public final short DOWNTO = 110;
	}
	static public class AltGoals {
		static public final short interfaces = 105;
		static public final short toplevel_phrase = 106;
		static public final short use_file = 107;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pTVGTuL4NKzfIR0e504hAfb0G22bACWeX18ys6W0We2eYz2sXGL1GBIaSwDdeHx8g2NUp" +
		"O2tR5tdl7nht$EpDdzyxTakp6VF$tFtzyPgUTUS#PSywScRbtMHdhi4dSmtg9ayLokL8kPv" +
		"Ny3dudVqHSmhVon$ZZ$0d#gDZiPeYPSeLSnJk8wMoBN2OkvcUAUU9miK6ivs$n8lwQ62ME4" +
		"4VnB$ZtVBoeOTUmpMm$reyT9KvXzx8xs5diTdQVwCPkOxUwKzY3x1Rs49lBEh7xsGCiZJrS" +
		"jmIUPoHWtyMJW5qHBG7Vn3RpU$YzV3FVeYLmV0dOjoJ1v#mzBS7RoKZ0sv4E#iQLu4esDKg" +
		"2#o710$n1$X1$M4jGhIJW$PK4$Dae2VvX3tkVXcKGTugx4sZ15JF59d4NMmyPRX9hnHgdnB" +
		"93OzueoWwz#UryAf$7h#1tYVF5OU9UqLAKoo$41576J#2$YRF5EFwBkubVoXV87Vn5FWLIL" +
		"icT$0RvblnG$iKFTmhO4MntjXlRmDQpNlnglfhVpUyBIyUlzwNZ2$crV0FhmVRcy$bS9GkJ" +
		"JfKpkEvPiSKqgpt4T7TJzApOth1vKBDFrZghFyoiMBergmpsizp9llHdvMvXNJbd6xISEQn" +
		"vCjft1f2SZUBAEIzQJhUTblEe17B#ITgVREIKbP2piPPpbv7J6UOKUByaBnSV0RdQnSXr5Q" +
		"kAyWfbqNQi1Ml2HiUHws$ItnZHY7lGtousIfTsSf9BxkyKfA2jkBugzqrHgdzZfFenA1Nla" +
		"enKF9JY2ZgkLbzperPG3P$2qtaMR7WyIRKDAoYySbxdssjPENUpUzJAOLlOdUncpAEtpm$H" +
		"pV0xpl3ZkrDyhUJJL6pXOtHi4JgwPPlOmZkpGrHiuPtOm$MHG7HtbzSYmOsGe1i$ICrMIt2" +
		"yZgy3T8HVRYHmAzWQBS47zPEWTXquZOqEt4bik9RWT2K1U2eTd6OaS3gQFKREhQyEsCXQT9" +
		"37DZj7yOEKd5g2SKe2PwIMe1b9S2GxHakmhfuwm0mJIy1oeOD3i9AwypbQWZUL1AoZtcE6a" +
		"1zC4dzhAnpaxtArh8#1Pdq8LqoNQMfz17Qv4Up8uFge6r5qe1LtZ9WkMaSZGhgEKT5ziXYI" +
		"n9xHWr13OZe$9HfLT4aONVBa0dPetVXkCugfJo9E5CJHmz6fwY6C21rCvmDYzD0MurD4v7r" +
		"81p$5qm7hdZgYcsuXniYezicKPUnNswpPlgndolwq9ybO57VM#xC3KfQnBo7cnfMn7deKLO" +
		"JO4ZvVsH1w37kFsxIXB2FsZzu9$#kiPPxlFUoi6CGUxCnK4M4HWtWI41V4hFA$sVKfp$fFM" +
		"jSTuid8YzY5ASlOfbOFps7Nfgp7Eop4M0#$ElgcaOICvUGzpUCYvh0bzRMCaZ6khLUcFEio" +
		"GhmfWOmfUpYhgDKoxxBtKfPn4#an8wwC7TWtgI8w7Nr4#KiSFQQCAB#XMRy66VDYF3oTfzK" +
		"tziW38MFF1h5C5mjnS4FiXQmp8HuBVuo9kBnzwljCv0GmFEv#NSNFITaoFvEjiyLqRqmqeg" +
		"pY#IdFUayhukuLOnbrTanLnb5Mf6YGKufJw7jut5alJrd6YMJhJt3VpOYPzJvyVSfwf5EAe" +
		"sQzFWPn1xYaEkjc$gpPWJ681$1dwhjc4kpNzTXds66MZ36hKFGIgUypmqZ6jR1CxAdymDGz" +
		"t3s94DMw7Xk3s2zrHAS98NO1uian$fXNZrKuWH3F1UAD3MAP6aAy08YNnSYuMgv96N4QsVf" +
		"I84vha7LDzphtOfnnvyRgCVKr8nRIhAT3nXanUbmWvgSywzc4M0d4FMDaF4kUdJBYKa9S7Z" +
		"Vsh8OcKlNmambn0sJSs22tkF2wFXGo7XADw1uixalPChSIua50ZDaLtFwfszhjv##kRjyOn" +
		"3xYnPGH3wHppqOWLZV8BOxyqJq0YFl7oDXRl97opjMD4Ak0k5yCOY$nOSgptfSGUy9x7es9" +
		"Zt#bVW9WMyaV7mVYap68$wP#lsPFq7ujuY6ofoHB6N4RoVWy4BV7hEi2MPWouWk4#28GNuf" +
		"1x5gFMRzgxQvln23ULu$TzHUIyKqWlXMZntVgiNFj8Cli0kBx3NAo3p$j#nY8NyKWVYt$JN" +
		"cVAVSZ1LiJW$XzwkTmzeD$3cVlH2CwNPoob173x#NUYOV8lDGjmpDerfc857Sto1EakmWHi" +
		"vOj6iJMv3syMJpByDnwpBg040jn3Y#DGMo5bHbyghkUzP9pwdedAHkv5No#eXKLOhdCbDa9" +
		"udrhCLFk8w#IVTbuLgMuioe#qd3Npu$NiIF4Bdf7THql5rlTBU9npjb0zTx8Vq$4gkGWUIH" +
		"ufdCcNfLFccVFuWksZ9sgtXE9BlmsFaNymOlTJLXv3ui7avk7YkPylapttmT0ok3xWF1Jxa" +
		"8p3tuOEqvuh3qV8ZeweUIuy0g#Xi$dn$8X$50r3#kjrzz1RgABuQBaOb$8TFwfwCW7wxSSE" +
		"#fyJrmbF3xVtTtTtMYBTFGDFzXw3tWTM#FkhhZmlh39WYIH$#LlmDfLeZMm1uWVKEhFUh63" +
		"5HU#6rjZuRykzt5tX$m7y4#ImmRoAS3#cwaPmqTu3kz8ygit#Ht5vUnFu8zpqra$kO$O0Wj" +
		"yafpMWQMapbK#Wl8Uf8yVVTreYMzWJTb8etMdfyRkAIR9ovEJtkd6xuTbwJi9GTi2HzjMC6" +
		"DRkGyxIFPr#sda5#gKVg2M$XA#9zy4wSFVkqYFaluLQE84kO$3OSs1aFuyqT7juyZaUF2zU" +
		"MTh5Ila#AkuYrh5YWVFPo$h6DBJaMOLosj5EyothLevycvH9YvZrM8htrSy7l2wEddmNk2n" +
		"4FXzdQDuRyL3hMB3mnd99hCFsKVo1cKRPmJxb7qcjh95u46uh8yy9a54nOcJT#Kjv1Addub" +
		"0u5554UXW7Ia#iIJz3RAtCxXrwqyUBKVo#R0uQK3kXPXT9bhnIHeN$YiNYalPxqv$FXahJa" +
		"9$5sdVNLkdPHon3NvrlfiZqWItE2WFAnC3rNjwSGNV9QJ8079dM3yvYny8NvhFVrVZUJk#2" +
		"xNh#3$yB$cGZg$fbYQoOF5omgtpEogyXFsYlwDIXjXTgRy1KhV5iJSWmYz5X5$2xrAMSJSv" +
		"kzFELCqMkOU5CVWrV46jrksXLgrvWiFcyrl9kjLEQxT$alBtLIk1pqsEMjb4KVjsOLMmL9c" +
		"OoFhmGvHDM4TuKTCaTfLYaUKS9VVdWunDd2BOj9apKjb4b8XylbCKE4VpKqMEo9FTHP7rtl" +
		"f8YYw2eiiGFZR9xnFzmeSdFrT#1X#T0lLPR44Ar1FuUIbGJ#GNf40z2VybJtrPIjJJ#OmKg" +
		"1VnnIbGB#ChKw1UozUbG7rpAbxER#5F9q$jDdEtfK2Tpdga8CaG#MMOMiK3iLtyNSlRThKw" +
		"dnDB#H4wfZmhRZ3nGBZyLQU5Nfq$yG#JMfsbUdN#AjgRrIaEZhCwZs4RrEha7ucYICpxcd#" +
		"M85uD9Fc#mZgPfEIJXyXxIBwTV3B$Mid7B#Bd9ILVAv4bH$3pm$9nHyadRxVbatSQ#PmiIx" +
		"wVt9p4tyZqevhUXSluoHHF5ybJvOqKaVF5y5eZydvESxw2ZTVxxNUH$JQyM#Cybu3$xJW5L" +
		"CXF#KbY6KxOIZzjdFoeqHUnSnBSQvkAcKunzjVFvMVi3CqRLC7HRWx$CVvexrQCFjnf9Ex5" +
		"kLXBxXoQWkG$nMfEJ4vQydt4JEzMUI4$psd4j5$mNsMDFxhkDUBi2VidlwAyLAZZx7Thu2b" +
		"bOePp5BG6ZuNMseYcwkqOpchLlkSwew8yjvF8maY5PppsS#MnuYhROnMUybYiW2AnczXTFk" +
		"7ZYJs2UF8faULU8FR6lclmlbHuhDh6KoT7ZTS3Am0dH$bwalla9dPNSDPY7z5JMTKvIkodl" +
		"bE6a#CYyvqoPwJunvhrcAXPBsIRiIRsvtt5eVexPJ$eR$ODLjyf4oFDTyh4aU9OzPqoCPg#" +
		"rLRdMSvOnPVEQIx6GBfr#euyLcln13bGD9Nzw0mPZYRFqSd1eJkdeioIXqFV9z4f95zhyTc" +
		"0LKuLfsaj8exuzdDsqn7ddeJs2t0MvnBdT9kpk00oNayHzY8hWfqHZc1YIYndSMKgdDtVY7" +
		"DcWFFLe9nDU6$5YvrYJXpE2xJFBagEinn1d1i7E2y1vNM4Twt6kpw0jrAiYkKiDshAcnDnb" +
		"W#8M#H6Iz#tHJrTk1rsVe1Lo#x4UP32Sqy8uDql7WsVDkldX#8H89I9XyHZm7XUo$UMx0Bv" +
		"tepoXlT9Cqq2claOb9#HV7erYyy3ydqhVefZar#rzJecQHD9d5S7La1Z#27X8RuflAo0DpI" +
		"JJM8v4sNpX3R9aVcor5fzQw8YM4jmRcNDPAXUUsiIufMBMRAjfSMpel3QYoosHdQGkn7UqL" +
		"g#FVGjhm$Dv43PI#Fv6jalobEKF96dRzveVfYxHHx0EH#Yly#jv54QRIeFqz$I7i2$vLFaG" +
		"POFA8eoyGGeXYBY7oeFT3UH3n#XvHchv84kpFoov6XzXh8rEaPBV3n9V18$LtlboL6MF2rA" +
		"RdKVFXsuJPtZDEKnyWmT3$qRz0XvdZxJ69jVYbthEPil4vhl#OQlo#K5nkRo8ju456OE5si" +
		"99zjpa5FabK6TicUYljkCCuqbnoodMaLhUOtJJywJY#HIQ$$e4pNo9VTNrfhzmNQoK#Hryd" +
		"fdgDh7t7xEKJX3AakzxFPr#x0JtGDnDftCXiZrR2Y$Y5KvHsXzt2HlnYm7sVyQGBsTPldE$" +
		"go4dSzciK$u#V8MUIiirPUDmLtOpBArcYL$IklZNh9KS2TP54VxczcliFhzmAzoXii7vLQs" +
		"q3cMNUxqjfzQEQFbqzYvq#LpyddYzhBMwIkQsnkqSzESdI7oRVcEthlVyvyOiF7E07OYUv9" +
		"LiIcOy$jiADl6XygFr1bD3eTNVemvjsRzM7zehPY$nwhuaomVEpRDcPu$doY$uA$9hu3mFH" +
		"iglsLditFuksoXtC6xYds1yB7SAR$t$$K8o#Vl60JvdQM9IwDMuGzXpf1k4QiK5qRgOIsKi" +
		"HDvN$cR$9qDOHiW#qBCvNAsYEUZtWjrN$O$vJ#yC#hvCezaNyW#06q#HfZw4Eb2TW#yJcUN" +
		"EcdkRkvktYq1YnykyyHUFeAxMsBPdMmdHnnYHPZZWlqO6upZnyTwWOqlJeoAjj#hUOdVdLm" +
		"dpoaDr#ZyrfVlSjf0CyeByjWGRmKqSQBJrcadF3R4gS0iZsA3C1TFdkDqakSwsMoGM2m#TV" +
		"OGNskRZ7UwehQtgKKuLQgTZDqKgH$c37GEyIvtzWRsNavtvs1Wxmli3DHx0Ri86YrHDf2EM" +
		"24ydkyCuFdUBl3wr3d0OFEXtb$EWU9JxyyWhyIhGtcQjzFfYrdzpeOw1yczvVMObV6qQZR8" +
		"6IHtUl$wdWRitmWxWkdz6iJqVlP#yBwtuc7lgFwVl1yzwsGgJuoIIVzP$QVKqJ#XZlwfTVH" +
		"VNKV$x3hwRwkZ$#7e$gZzuj5ONmsCVpQgF#oTY9VyDFc8VCawZJt6Tu6vzbNaGv264fwdwE" +
		"Ks#I8yXX0OawzfMJz5qbPLDJv98vZzPmZmXl9PUkVt#4Moi$vNC8E2aKFyuYEedStjg17Er" +
		"ueO8X07n2UH4S#vdSH75eB#mmWhSYYfiRETo0pI4BUJ7Nj4Tpq4iGVj9M6fvGSs0Zy88vZ5" +
		"8oXr#2#AfvAQUamzUWHuuZF2Cow2FsAH7X6KEdO4OYpMMb$5KqlzttYglrNwtunTJFLAs3D" +
		"QjvFDFB4VnymJ5Wxo90jhUoRW2GiFWeLFzzl4Lt6aL3RmzJi8RJq2akUZJO#mzjE4SnNRrN" +
		"uQr1P$EwWTyMpOfk86xOdTwzOlR52NJLVLwKVQflAk1l8ZbXHFDS#gWE#omDkkU3ofRkqFZ" +
		"FR5R8erViy0wcaUqnCUavkmfqN2db32diA4FSK9UqefmlgwYbTYp5xd9ohTOOsOqeVi8#ER" +
		"M2Cusx51M2C1txIq64T$$7oIvA0O6J#Xdc49fH#HiEVqX3rd9kmv9s7F#8GzvoNicPQmvvg" +
		"4FNSax7aWEJl1Aj5sccnAsYecXZ3#XbvHAheai1CYboaHDl$aVu8VeakT$11TKkP7wp$CRr" +
		"NT$FnPfSXlLOJVe4YCI69#YVZ5hhEeqg3Q#CMkizJNTK9#goByLjNDBzQ3vUBm#Jd2ZuMnB" +
		"UfLHFruv6HOIyoLpoHQB$A5X3sl9kpPdh3dpQZLLnKyBqHsZRPcTkATY0vx#FF4FNUGFYao" +
		"yQwn7XyApvXCExY9cag7X2ssQ#mW9oQ$OFP9yILriqBh3kpNcfFSYVkEVyzLVX96KDYLKRL" +
		"e7s06Bs0XoEh$NaF4xrZKkKFLBiNvWgdVQx3eyQVF7TRJ6xHCKqzlV7gjZSWOkQU5o$WmQ5" +
		"6XpDHKwadL33F6u2BVK$zRWZuA5nHdQxgZoRUssrZYIR7Cj6FCVdGpdoa#42$ePmqpn0sM5" +
		"DDyJN1Q4Vm0EHtP8Ytv82t5Vk7LnFSX6VLvGSx0cORXJBD5eV1kbZuZ8#HyI378VqBdjBJi" +
		"OPzJQDxul0qS1mMq4xI0$rsxY7Py2$3tV2p#dlxz3sQFiCeR#BiukVLGzoIqlqlSlzKZrEZ" +
		"tLLdVanRoZp7B7pNkHklP8RnNsTYQh$gc#GxnCjsJ6D$b27ogUzU9#hIfzFnD9Dum$ZCGdX" +
		"El6uyJJzcQqnvXpcNxHKSpRMDBSy4JjFUtaioQwQ0mahZHiaHws9$53V9WxS##neqkNYGlD" +
		"$G3V2tZRuDQsxovqhWpmAVNVK$pi4NtmgX7U5Ed5RJTNMbPVi7zsKSuoXrgrSiDB1Dhczbh" +
		"M#wGm#2r61NTe$g0qLpXnVGzhQHJSOJlXPgMGFRdtSEZT8J1A5vf$TQDulK5opGzOJpLeqQ" +
		"GZmNQVTt4AqLcQNHp8NHfIXT7IfVO#aq2u$B8o2iZfQjIn9WP6JaxKbeL7oCyqgmGTSiX#f" +
		"iY8vytAyJo7HCH$WZQrrwX98rvvlyCtwLQiKAiRz2YrH#vAF0qM7CLRni$Y#1LWUiOtjNfZ" +
		"7XM9TlP8mBbuDyOFJTuYjmTPToIv6L8QlUgaZqIOGHMoL23eMMvn2fVeUVaKmBRoJ1#hptF" +
		"ke7fEIpI7gRZkzpfP5YUzmKRJw1LHhDE3#F1#lq#$56yOgYzF#31LM4977DZZ$0HdI8tTXN" +
		"VE#lt#uOoanyJULxZydrmO$V$veZlD8xIaykxeQ$Ann4$ey##IrRvEEYrlwluYlZDnz5zB8" +
		"9JvJZKett66dK2qLRv0ZdjmrmqnSG0$KojgqNQVkFiKLfNFjrZ4Ltkf$LgOxpcbtbBmZ2w2" +
		"j3nDbPvbEvR4R6JJVTAm0PLuVqXcavOcXHTWrHwVp0QUigYUYy1LPLD9PjQvLpqsLYM9cKe" +
		"KEiKg5K7QeS6QiS5QcVQSvBlMXAoIDcSOX9zcddeidZABeVNHoIFCzR#umSa$bId6FKPhyo" +
		"xwL8trQ9EDEhJAXlgRk5HTbcVVnYTWw8$EHDCObcciNIMWJsc4MlCik1lJLasQyQQOmPxip" +
		"neBHzwAc25h8WLuynSobgoLZYHjs7Lh1mdxtQiWhLd7TXkqF7Uh9D67SAwicviJzXXBxHrn" +
		"wbX7z3kothXr320vQhVH67Fi0EJa82H1ClYIZ0mHeB6a20yNadmjoN1eoJ1JJWdA0bkIKg2" +
		"SII1Z2l1s#oTEYIGMe9oBS7YE1Am5BJ08OECaK6D2yhG6rAFPnFOkUmygzGTiUbyTW6Rn2v" +
		"4$BYObR4hs9MmubNiQg3Mu3JtEJk87SmEOOUomzXaTWcx536fRkbo8PtY4e9qYkfqTWOxCu" +
		"bnlMbMSp2kB6PMus7puAm693MhRTQi3eND#oEs#hFYx4b8jL1BfIGSbkJyb9mJuihvP8oSC" +
		"YavooqvAsFaJCOhmdAjXrozO#GQ2ei6vJ8MdS8kOvVN8jSrsckhuRMBTAa$IaQkExJ#afKg" +
		"lg##sk1IlPMKLD#ak8BAKbv1rx7h8LLlacfsIheAHMAB27XFUHI$JXHVCoY#JjMnvKqTMye" +
		"ejlIc#7fWKj4jLeA#WRb7I$0d91Z0XklP#XACrXBq9Waa#2e9gkifGUqwU9DqK0M#lWIzjG" +
		"G38XBa$YS9#h8JQf6W4X9CXmuKhY$1V2t1D9BWMepvBnAeCOabw0C9Sh6I#gB7bs2obc0wI" +
		"T0L$Kg2uKb9i8Oac0i9viMiZ$VO#r7hesx4SaAS2CJS6CIkq68GiMTIiNYSjOvZOzweMgBB" +
		"CTXdwiRdX3y0#9KDeeSmOYuGnyKWgl6f8YuWnAFYwg0#YFqin8QLiU5dtQV1PYqjn8QNCTP" +
		"xweF8BNzlM1dZxuJrGHniUKzL3E8uhALK4VjO9yDOn9fw8CwrRZAnYDNrGApy7$FmtBWU7d" +
		"lJI5wFyQDbVMJiOydOCBOURDcwOMJiLgjbrDshlfRf5rV6RhZlrZVsACIdu#WnTSIlBJt6n" +
		"XvrNliliQTX8aNd1aVSOiMUZ0QDk4FZUayv6$EV8cvv368dDZ1bnF7MhASrQ0nl#7scNu9P" +
		"f#xXOHax0N5036BlUY0AGbm2n24nYCVXp9WgueFMh6jY44KzPFoVMpFzudfFUJra33ydd0t" +
		"4lUCWfkxXOSJA13AcZbXDY9s1k2K6SN0z48yZn2#1k6#3M6PVGbmPTysSpSwfzwpBWLZT83" +
		"BQYB5hPd0zrinBbeTtYa6iOX#aZBYI43E0E3u6yKVsKyg8qmYnAcxicVOVrip2kBQkZsNAB" +
		"Sl48gfd2AaY3ga3SMozPHoQ037rtJMC#5c3wV6bEcQTkZ$MPPdePo6f8Kvea5bNMhjhymP1" +
		"l8SGVuwBU0$RbJBYq5eZnM$izvGHlo34hK0yla5ctSdQNMDbhC$kEe8GbmDnPPpuMF#TIvr" +
		"x7cdGEvVonzanYFtOyoaZBh4Y1Oz1d5YFI55fUK$itRMSlPmoucnhLuX5x5SFovGHuhIuxv" +
		"hgOvameW3Yn0P137lF8t4jysmzPXrUrsy1yUCOnArOcQaYgYVgWq4JYj3#YjjIObhr$#NP0" +
		"sS5SsQlWQyOxkRviVsEQWHeEMWbwwdv#q$fQzZXR13k8UgkFG1vUDGDx4RzdcYKVa#qccs4" +
		"JPPeskJceQX2eB8v1Ty7#FAPUKm5XrBsBfkEUJoV99VUx7LmwOqnQxHiFhVlehYD8YuADmk" +
		"uKy5bJP9SQY2NiOdHLbZo7G4TSz0gBX9Sgf94pc9zW5o3SZVek1AbSeoRJ7FX0VoEeDq3DC" +
		"ScYTq7Ub7VHbaEQkKZIdeZltgQD1aUVul6tniz7N4gsYDfv1ejTH$j8mepBAMj6oNnaUm4q" +
		"dfr1BioIHuZqHgAj0PjAw9isn5QsmCfEUIUMlfozWnwQoAzssAa5v3SIDyJqdy5oSkJbdwS" +
		"rdsOLY77fnqLMSK3sGDw5Sl8AhPNJYSzNmbQ0TgWrzN5G#qWY$MtJgPZveg7eZKyviFhX7x" +
		"tgJwlrUCxWjyU4TpUR5CjjuiPR2Px0hWc0Wr47ev0YaVNAFyTP#7Mhh$lsG$Gdwy1zVPKQQ" +
		"1hn7yNCm$##nHiOwoVx8eprZyIrC4ug70L1$LcyWcsbuxi7J7xP2K#3dCFqHlkSHXVGsysn" +
		"sZaiL6QM98qxcB4xf0#bKbGXRy1Khl53wJljfYPASkKuPnWB5EjOqmOGqNusgrhA1N60DoI" +
		"3OPaVoIzsgHU2GL9KglUa7wQv$k#iNnlDapRP3Bw2fFQLTJxxZiGvurDfbllktj6tdSlrc#" +
		"RHq9ZFkAjKOYlulIRdFGZS2P8Vgxba31vwblXuSbJhqo9UXLcdZnrL$oNF7NFbAZBzUadMU" +
		"eJa2TFtIybVS#6lwT2dOgN7mFwvAav94zbbkDIe9wkJsa#zHoifyHlsnLM9xO2voOL3$gnj" +
		"HGFvi9ky#ZPFazXTLP7LcTbtDMvKA$ESkkx82CHlUFBrvFa6mZFxwhbgyG88zy0zAwaEqzL" +
		"ql8LOPS8ozTJozSf85yboJV0aa$jKuc$0nACoOglaQy6f$umma1sMXqHUGcYbda#k2gotuP" +
		"7A$aJynyCtdUnkw5vDNe4Up1gj3hFnH$z2aQl8QhRzMX55HpD8NlYjrFZG341sXzFSqzUyf" +
		"MrQAvkoP$JAsWmE8SbxucP1qVNlaQ#XVsJNr5xfaGTkzznbDNyfgEaFDQ1XnPgjFdC$eRPj" +
		"L6UcmlV6wVnx6$PBGvuhC9J7bi8Zrs7TTNFmXiLXRUOgU#kboEksNWoWATcgF0ayDGC#zLx" +
		"rWAhoSowZvPIVG$CVATiVk1xmT6pdWOfrPgGWU#K3TDIdaHIdifErb9EIFfRRKO#d#iIEd#" +
		"hE$97MhwJT9oJKMV8ZL7IcIUJ8L2UJ5fyKCltS42BvQJ5Jf3FjzyhSVHjso$8#UYud7k3SW" +
		"BXbSUDOFtYS9wT4kT#SJbt0kLimfDnEHyJX$CmJVb9afoBudBU1CeZ2UzJZSS3U6fVZ#NSN" +
		"LFEJiYvFqxmtItU4#DynxK$PZeoi5gE3k2flI5ysgoV7tv8P#4FWN4hVRzVsNXOb6QYltbf" +
		"D5EkuuYHhu#Mhp8WNn$y5wkPFYbvmoznEI$JCXeyhl4c1l2MG99Opl4eRSwL#6zv8786UKy" +
		"4NcLCHEG9yIQoxQ1FhCNbse8JGMFZcNyZSGVXSVQQnakC4csfgHYZJYhJTO#IH#M5pDLtiz" +
		"VqqxToQuIYK7Y5uDb9Fy4g2wpmPLeU7l4vyurUMwF6wXE9OXtRJBeFIhOiZYKdwgYtGrEgv" +
		"sSg7jhhSPCUOMo#79GR0tp$ilbo5h7vSiJ3i5zEj2GCpq7PCQZJDw9aKsSQ#rd1LDtBeLDr" +
		"nvfjzSsF#VSC$fxL6pHJzLfKJqgwwbcgPpxbM8lb6DbJFz4fnAvOWtt8l3SGg9V5F8$fo9x" +
		"2$RupwmAK8zdzR8o#lL#3P6QvICyof6SfQ9RHJsLZjL#9SqiXqDHplAdwMslJ8ESCza#0$t" +
		"n4dKwOLJbomss05OkEZlYfcVE$u5Ufvzp9uZuUCyv55AfXzq7AUy1rA2lHpoKlqLxv2EOSH" +
		"dY0pTBVRJHFZSoSZJovY9Zba3UajJHKdz5MGUPglMENeQy$Uln$FTAHtKa8JzVohnVy9t0r" +
		"#guoDN22D5h8HNsQtdaNWlCqr6U0TY19uii#3bBrHhqZpeU6ypJsBcWxOeIfXzYzEchMw7z" +
		"nQBx3pwCiFbZ$l#B32Bcro3uKQFTP$LEZ#hj5UK5ql$cMRk9#$oJU2Vj3kERlmaCXdVA2mP" +
		"ZNCCmh5$9m$Mox4hNHcDTWr8x7EFKB1cNi5CohakPr5dkMdZwgMXXxA9N2TREJ3KCj5oVlI" +
		"lXG23fLsEfygh13m2xKsDjH7uZsWOnf6nnAs2Me7yhKBvC5UILU7ShJr9WGahBtLD2LMfxM" +
		"6vx60fuMnlOnMHIc#KkiwphwFVtt$tD$tRvQstZBLqq#rTgfizXU6Ajz5Na8gP3mIYFqaLM" +
		"CrYmjQqSaRLLTwweH35u8lb#8#ArylrJ7RpMoB2PoH13qpjP98nofqK9iBX3cHKPiX3SljM" +
		"NGLFtioA6bVfZb8X#Y4Ve5OazVFKBv$H1BwZS2iMSuAqIRFy#0r1xzHVDKKbEFaI5QohAWf" +
		"k8Y#3nhz8Y0rB4ZACRErFCS$bzvqWYhpjI$7OlcsTFCKptfZ9udIUtRCsnXs3CHJrYu31Qk" +
		"ib2Mnf5IzKNqYn65#ZsTZz8HRT6n9U5SsHozdmRdEYke7ROYR5EsLlFiMxT#OOEaRPh8Zso" +
		"R$dS$YhLf8jzLqlayyMdljN5uHcmSqJTQWh76jyJgH3s9n$olzVZsYbFIS$VzC5VhhgifQH" +
		"hZcptrZbp6gg9yqzTQ7FrXZIJINzV$vxJqlzzJXvsWisWxzIGxLOLZ2F8#UdrWL28xmIh1y" +
		"z2n$nFy45tgv8VeaZ8$MlyfyBEYPBtvHQBCV#0NkywYIhNoYxFEKbxN3SEl5WyEd1UexA$v" +
		"ifYJNqenz$$EwjFlYUtpWdKRr2tb4MyPvyyJBMNgf8XIfT4cRXyTuKzcTYPgsZgSex43d92" +
		"wU$P9SOMwMQ5KpTRIBjOVN2At3tiVrDWPmLgq3sY4A0lfVT6oa4T$KN5SrN2#GBjwYcJf42" +
		"sctTRhBAtN27sK5wmFqDx6nkd#TM4iThCPOyOZNszcvPdpp6swxI6ISau0wovsDxMlZsXY7" +
		"RHu6#6kjQIOPQsD5yc6tHKkx6zEKcgc$hhgQsGqvmLWJSEdkXCg#nnXwTCVyH2ai7zBu3RV" +
		"7lOvnTAXubWMc57G0dOFQSSQFSklONP6X$6n5khtVVeT3zfNsPRIe#$KafZlOTvfJcxeUTr" +
		"2KDuB6rkHBl2C0ErxiHNuLFUaN7NQr7hU79ulQflr2YcbjT8ceBbn4Jt7H3FzXCxMNF04pR" +
		"Ha0Nycf1UjrXLXVuP7HFbpF2#dTH$snuLQykxQptEZlBoQbP0y$T5dLkf2lL9NmRjA8hFti" +
		"Qkrtzt9HhF#ADbhkrfBg7xBDQf7zUbH9OfFzAY8T7xFJdiKIJSiYbTtDjhqs7XgH7W#WVPu" +
		"lmuIY0fHNXslzFymHcIaMI4r2J3K2l57KqG8sjUMWChcIS8ih11btnw1fr6p0ZNxlXBqix0" +
		"lrc25NgFZa7fskYWmmYfxWJzsZVvy0MaHHglPtQpA6k#5H1Y1LL9YC3JEea1PpScQWrubsk" +
		"#rJqRD2Fog8wkyFoXz3#lEnXDcZQzPJGqCxS6hBUgQY0IFQvvnvg1NJ8rwTXoXl2P2DnUdk" +
		"NcMXcx7ZPqmqNS4RlCr5ixIADlujRdedHVeit1KdoLR3LjAFQlrfptAuDHO4aNnZA8VJrvQ" +
		"mnu8Z58qGKbzNIRGaw7JexMkwg9ZjuVjL1jTr3E3H7H1AkmFXDscRYhmQ5CBVnihaVN#Gor" +
		"gJlQvBhX39lYatT2qjB7BOOG8KfonWTNTFV4dFIli6wyCB##kFz6YJpJT0sL3VKHub5rM5A" +
		"OtzfCnP#nbvWdt4qX3gVm6Oss$OOnteFhRA2zah6M5gJU$qlmAA9#Ywk64$lqPapUOiZCQQ" +
		"GpQ1Z2MLeJyEEHza4z2VYPoaALd8PsDydN8xq1#DtBmogXYhFm7v3MG8uTaw4Yua2kpYIbd" +
		"7WyvtlJvf#K5vMdK4MrLTXjXtOdsaoswAOpbN8nyYzzMaebvVgr#bPkmvw9$FStp0MgBq9k" +
		"wt0CqFuVhKF0EO4n4sqx66XSZjS7OxJwzmDpJFYBCxqoUtWXqWwZjDs2sDUNo9g3zWSgzB9" +
		"wZG7yW4h1QDKK#3tbxmYe0BVhIgwrvbM6k0kDUHFjjeB#DT9AFClJV#7NOTHdo#v1sCPPr4" +
		"59hO7OpT5aAymJCxNUgdy5OxWL1FN09RFLRpXj9njrZRP05toW$7NIVcNe6V55yItspVBeG" +
		"T9YrXjhXSrdF8Rs011$D#XNfToINiIOuNJPfXTG12NDk0hcRd8Cq7kb2fAL8yBCcgv4UGje" +
		"AVbsG0wVL8SW$Gjfb#3Gb$N6CQvh1MBCRgHswRhetbS6drGbKHjRg35CktWtrgv4kXUsXgv" +
		"oRK4OAFKcqoqtU5hxPz0zJpiwCrezfTsP0ByD1zxEfjvX4zCEGiAvQNKdrY$qnnQkf3Mkj6" +
		"UPVZ7MT3JqtX#ojuHlPM7iEx9m1#RBFyiUn3o7hLpHlMkVP6x76Mb4PwpFxDPy#6thFVjYK" +
		"czy06zFyo#4$sH$1Fw3FRDWdlRzfpxq8MB19BkpSYlIP3VzkjTQKc$NtiPl1nfdZ2NiSx7G" +
		"xycinzb7a6w3BYzLFcWPrrQwJoNFsGeBUAvv4tWO9wo87SyqvbR4E#m0NyIS7iQb3B#HN07" +
		"CiykyX$w4emnVaSe0i8fblX2xW8xaRBJxxcboSXF80QgEucVig4lZcOjtalaTp6MNoLW#ZZ" +
		"3NNwat6ylQ33SYMkOXdpYgYFHUo33TbforZfLzI6Vh8wslA1N#W3DapUwFzLzEM1t$FWrxp" +
		"ZaOwZR4s52l5XTIF#9Qt06a9nZH3ZdMVjv3wLY91vhoRaKZcl5zeF6oU1vdpe9yMY4kbdoE" +
		"7JkLMagMLRGCQknRfZs1R9gthHYrG$X7zxvXwyM2KuICjO9UMuCDpGODrdFUZwMyn23wBVI" +
		"CNkcu4cXQPFcQRwr5l5kJ3naRBG#shuhNNbi0FSQr53wI1I9SZBKOw6NnVm$mtGVOqGzVg0" +
		"xHR$j7yMzYm5B6wrDHp4RURjxVwZoJT$eHnBoEzXRRBJLjQVzGVGNuErH6pMi0sBU2NBIOZ" +
		"VGR#57FIjY9amt$prw0TUtF#HqZOhzAGYex5keCkAx0VfCFNSc6pTEYm17DAdmCzluzyCzO" +
		"HR9gETHz2VC$0ViS$HhudP4DiopW6EVQp3EprW68Pju8EE1cGfHIyCn1pIx#2FK7R5h9b3W" +
		"7Viv0ZPXPXZMOYpXPtG$uySgozJAprWixGQqlqOosqWByvwu0vBe7Dgj7Vr9H35ETQupmG0" +
		"f$MvDUjBpLvI#nfQPS06$A75jEOPv2WYz03MEjOAurK6N6a9MGjm5p5DkWT$jK1V1hdcZ4T" +
		"#gAyd#K3YB4jxaSRneM#CMqj$WOlw45YFg57B5h4gH3YQYF4gNpejT5Zu8COt0ZhEtGNCFA" +
		"GtqksW#uAcgCDvvp6YCUDuLSXsA4npXWXlNRqwOmL85uMG7UDjo27xHh3naLv1YEh4UML9Y" +
		"z0tCk2tGkmrlCHozBdepmISuIjSU9b1HUHFrvcydpmBJYHV19qMMeEs1SBfaBlIdROC0lb0" +
		"knT#JE11psg$nD5OyIuWfd46t6aG8r1J2kutjT52MnKy1tyOZtoHqrROQ79SwOXRJ9bvs1W" +
		"Z00DnPq2#7S#zfpyROJ$8ic7DPYbP7gVCFu17coGfVZ#5Uix1MwmNbW9MkYp47wI$oLy5sk" +
		"oSBJLJtuKIaVV6D9JJ#85kxJVJ7JOiqCLmCBSsZzhsjfW3iqGSvjCiF2Wjy8UX0aRb$rDj8" +
		"UZdVQrzh1B4wpR4gp7Gcl$BiJ#KwZElLW$XJZVbj1Ur1R#N0YRbJnEEW5kMzYY46kkv3aQU" +
		"pxAVv8Da5fWBsxodOyTWgsQvbEP$A4Gvxp2wJvD2VRAPjj9tg4ebvbock85NHHYFRGX7qf3" +
		"B2Z4EYZSZhQhh3c0RvkPGHkqkS$a#OZvHKh$s4lQqFaX7HX5Y465s3VRqFnoiVyLuJvHXFs" +
		"gpK#4WJD74PtD2W$3N72UATdVvv7p2kQxMv1l9jPT4TPv9jPb4Tca2VRA8iJQefx0$3j8Nu" +
		"0O43eIQq6DEzgqjVWKDWpW4ZPiK0H$BZhJcli9GPhyKeiUSyd4MYx2Nbo4U57MsRGNuRoTW" +
		"mNOX6nIXFNQXCwycLXxHTWJYk0hPPL1x3AwkpLvWSRT0tuu6pT2$2bw1mdxLDd9fCy$KKSi" +
		"AjgADZgh5K7lpMydBAKVx4TDw5pVbCvzpRRw$8g#GFj1fYonJnHZFo#2JPhzQj7WhD0KP#x" +
		"22SZXhqLOqqNOwt9kDlqj6oFXFfYhzWV4mE8G4ivhnKK#XiGvg1YsBsu7#UX#L0nxvIkR$0" +
		"lSwqnRAqM3sDK1v$SSn9msEEiL8mOMdu84$#W0NskAUHNK48Qwvo5#DoKVQugzklW0Kyx6N" +
		"4AqjvOYLXJlYpRi6uKuosShF2KJwjdNe0txGJRMJJ7yfBWVojXt2d7EReQvXM2lOiJjPeZ7" +
		"XS1lX1XLV07EnRX75CEknUj8JuWPnJYN5py8cZt9LnuYEQz2kXT#f#BdNTI6Ut6nmlwSwYz" +
		"XVhW7v4D7RR2FbZIdUS2FYc7d3ZWB5cFDbY1c5qEEnZW$5MEz5bCCpOT$b62EERJ7TY1VB8" +
		"Mlbq3F7VOozHpIZq2MZtjTIJKmeCCIhE5YkY#5OCyIx3Sbc5Fprc4xchuskB#LuDvLGNju8" +
		"VRU46JFvf3fFVGXjfVGcIY4k5U2$QO4PuYMZcah6Oj4TYd1lRq4zkW06sTZpynuaDfndYZ1" +
		"FRlaLQhZ3De1zyiIUXQH3TsLO6$keE8frffGya979JWxbVo2X3sd17vS0XkMObuLE5kMF0K" +
		"RGiQIP#pv#FCgmRnoiPOvpc2bEE#L8buLhqAECnF7$4fWzzAzONVSgqkxuuu0tPNYFDaEFb" +
		"yAdsc7ksefVBgKxX25dwaSspxT2zWQdrVuEKpEHq4PpBC1gnuuTvksPgURF9VsaHQqvxVOv" +
		"DCKppTvsRNMk139GVS4UHRLCUUCM$novjd#cCnHyNHLLuB$ntb6q#nvokcEBDLQehjayJCq" +
		"xkBW6DahM6y4Myj7WcrySXGDdJ4gA8QcuRpTw6bJRjx9fylFyyl5VVnoyzq81pxOV1XXxJ1" +
		"vOvntyyS7#UMaKtuKOe1dzy7sp$bqQLvmNCLdX8bxKiLOlrtTsxEaJMlQivf5jyNILFnXqS" +
		"VSvQYzMrquzKtOQyuZEUZCqcGovRDCNaGnARJE6eCxUPEmVImVRazwRVQFoPlsKWawVSFKq" +
		"r#dzh0FZQXRFeRzi#dAS1rOznF6roRdCR41TZqsM6zrYOL7QufZByZE3zA9RB#SOPrDimzA" +
		"B5$s2T5byD#VUCoczdDDtWmnFGUnFHltYFQ8STaK3zeNrww3vgJNvlHCeVdmE3I8jSrFel9" +
		"d9i$j74lNmlAtq6N1FkTGocyCjfluvTSbnQ$SHUYZFQL5Qsh3lbaUrZ7feRpSv1MaX$PjJ2" +
		"ui7Gjw9bUEys2B7$tst0NK$w7LXZDcUHUIXR1oVqNyfcSneWrZUNGto#jbydPTAQTdX#OPa" +
		"e$PxWZAHr1#hCdP58k6ragxIPOi5JPEeWIxq$CMrWxobVljBRudp4jCtWpxLTu6YoVTfSiH" +
		"4$CUJOPNGoNmUokshTtrD8zl$BRsNUAFbyURlEKNwYpfjvTJR2wtCCe$fVclD7c8pb8XkWE" +
		"gPozj9PNf$1MY69MFysVRHZuMcqevFSFYzDoENqCvlKyGuNSfSqsUItUX4FKN551EUqe1xT" +
		"65T2vlHJxRYlRYLdI$QlKKvQzH$Y7bz7wXrLycpvb6$9omx7PIvmJCBMeFQa$#sxuFvGURt" +
		"26UnGlYOnMFzCjfDAyqEfUKpFNxMlOBZcjDQxZOyiaSccV1oq7QGheJj3wCShgx5Jvcyg9g" +
		"dpPqA#5#Wl9OvFIyiqHOyxVsbjPqXsfzhjKsXVBPLXl9a3lLRole07ohdaznsPm3h7dXFbX" +
		"0FX4IX4Vlc$B$fRcevpk7MFpeEKhZyor#k6CsdeDyDEPGhfuB1Vcezmv58sc#kUXV5EmFuQ" +
		"uIelqrdTvpPLq9kjKMZvU8$rPxR6q9j7JEAcnC62iiFBhh5ZNnszhTG$cZy8lmci0vlfnyh" +
		"knkarUGZvZdDYIlzLoktHj#kVsnVhcSdhENtXvVtcRaworNK9rqKc75t#RqdgxYQh#jWjvj" +
		"D2ioUTfNyV6DZ#0iqzTlAy2TeWdkG9BEGHMudsGJNQ6wYz9puVQK5#B#LqXxOFkQ87xxAuB" +
		"rucmQWpjd8SMvefVy$a9QL#tel5Iu0edEuEtelMFx6V7c4kJZhsV2KUzGJWy$OoEQ#omvvq" +
		"NHdmyVlHJvkc1x#wMnl0fnnyezBTZMDYek#ElCtwEBw9rgUugXHLsHrDrscoNZszHNW7G8q" +
		"KV9L45tyn9wRrPKuZzZCi#4eBlVg7uO4ZtVgQ3zfMWg#ka#Na7dbl3pkz9CavSF2l8ifUUe" +
		"RMVuRULHjY#ZyqdH7B#jwE4WJT4oknxiQxlAAY#nnf3VbDAT9vtcsehuPGJk8P3hMXf7zxL" +
		"YUlPOIljgwS6MpDRxln2TvyeeXfSURT5HB2uzpMgZirsPTLugepXRl8$9suTZFhstARMULn" +
		"Sx9i#FSsOj9bdINQhluVUrpJ9vfdMcAfvZydRqJgzuYycRaSwQabyKqxgjs9smw7iE5VISh" +
		"2qzXmx7Ds4zNsr1xzCowOnHVBFL5xXBWsOPpQsOQB#2NUZiaaCnkIdTQym#I7otcZoqriQZ" +
		"kP7F5fDlvrCSBCconW$oooNqVhGYl1O2CI8MFuVE5oKpWNrsOhgIrS2wnQzBMaD57Z2ed4l" +
		"dgnQZILOw1uLEzSSvOtN6lAVrvrFUarH$mhrUvUvrxc1t4F95xhKiykSkfNo9kpkL5hjduV" +
		"DCf5FTXUvSvEFS6Rfdl7isFaFkEMuhNM$ljdGxc77kRcux6j$MhT3v0dUE7ZiTduYTxdntd" +
		"dkDxfdjpcBMdtkYUwFEbo7TeCVe$n#wEqr$NerqeJl9lS2Tw9w7CcAhEy5jfFkckXTPE9Un" +
		"c3$t4gAyGdzUxcQwvReqs2r3EiEzqZtNhI7QgxIK9#3pDFTmtJ8m5h6kF#znznaNDl0UmtZ" +
		"OmDtgFkO#WVnntNkkc#C#YWIftFkHRdDlSMz5VhEx3pvxkDtTlTsztDj9elkGDb3v9gIDRd" +
		"FyzuZxaAP#MBS$IFqFk9jrVY$I7RfqZ$wyqtqAdxTuMpL$d4IyBKZFecsTkuN6FkQknUSQT" +
		"wMxmksaMpfI3xpJNOMqtdj1UPRtF18uUWz4pVevohVfpw#zxtJ#hVUvzwdtcVS9FZz6#j3D" +
		"H#i7IEdk1rwQDTxnplJEy4xtZl96UCsyRBIqqUsjr0XT6gvqvkd$cxBxBnBkH2xElkv7IA#" +
		"uNxgV8t$LVTVzp7t7$TIM3RqVu$D3zmDtX$k#EnRbzq3t3lAtYU8j9Cp0VPxgRxhfxajKVi" +
		"DztNtPxUPsTlTmZq5zf7kqUvGxmXsEyZ3tI7UeUuGxn3tUFSuTuuvsHxd7kbqZd5z0Ub6Nj" +
		"klFrzmkrFEddjCHxZye$nsX$ulodVfJpNSmybsHsY0FVkd#WT80f7v8VP7w81s8L8rq0DB#" +
		"I3XfULL8#o7rGjeNgISI$CRhWTGT2JTbRo$W$Uwrz#3fNgwtczS1PRr#FQndhmozto1zZVH" +
		"Ln5OvKRR$9bBIDDuptfUHbY#y2kymNMhhbLFR8KY7HYWEPb5$ta41w$tkzKTR9TAUkdSFf4" +
		"uk$LztlTP8#lyAxvLOOtv4#WbjvCLUCUpvhOSeu#tkgGYJXT823t7HM#XjyDPxJOckq3L#6" +
		"q8A#rqBmlpUJNCTLxh2FTojTCTwURhr1r0qGShoCl7P6AcHrnoVD#cnDqUyTntbQxqrMexL" +
		"khPSVowBp7oLDyFImtJAfxbjg7Ir$hoAQbDDkzlQNUXTwKr1onNUfRhd4lqvEO8qALAwm6s" +
		"Yy$EzYpt4Jk$2IC$4IAacKZfFVrvck7WhlGnTbsuBRsE4vZJzEGhfMEyOxzH8#odUI7mUxP" +
		"tiZVMEexQJFDp8lHEyuzt6RfPtdMVjHDvyolKUuSsDjC$pbdfBa2z6MgGi5#cP4odDrf#qg" +
		"tZOFJmbiUS9NUTXEjVrYjoVaV#YQ$0XTqzOKwqfPLTbtpmtDu8w95B27SLxZSglMXAyGlcH" +
		"#hEb$YmriSlJ7kfXf$IwXdkzBX6ApXOARapU#pf6luVIkv5sH2WF4SfxATBoelSobH2nl3V" +
		"TfjuRI7TJsvr8Tr0PEuXt6yswgVSwqZaHbBEyixsxa6z7HFx8H6Jqtuyq8K8p3hNxlF3$XL" +
		"wrO7Vn7a7IkugtoSC#us47yXvYSV$SKhV4BNQBt4At83v5x1ztOIgE9CA9$SKu#nlf7vJ3w" +
		"IdKdqB#B$9$aL#B$5echIHqMe3s1QWlO9b83b8QrTFP3lJj00rkf$ftYTQWtIJ1fkjVE4hN" +
		"lpTfoWxbvfUFJ7kuJ#XVkRaVDFTZpDV0#XhjJuDE$Hwj#hMtcU1lSaVdpu3dCnZp3ChRqBO" +
		"DuxQXlatNxPH6xIBI$opoPq7$BR2$HVqvfEzquknvO3sE$iSfXuMG97j19y5MW6Q5pbLAOs" +
		"j1jnPjQz6$LjSb#m1zBo5$2NNbTv$eb8OaAGbAflufocgt$HuoVG#w7tHAPp#o39r#Glqdp" +
		"7yf#2n5#rBmN8gsfHWx3sNrAnNpKDu5d9#HOtMoNtIIb0GboNx5E9Ca#ntvRy1JwG6cVkDN" +
		"9SvUHlihAB#2yeCegr$ScOhnKz4s2$LPAFkvGxbAdBcKr4f$3Mslelmgnjs1VATEaar2FWb" +
		"zau0n2RnDBYc5wsaMdQ1sXzeR4MscDUw$fZ0VXPzX9RjFwb#P2YP9II0vL4wBIfBwX9MBgB" +
		"gYIMSl0lD5rEz2hjBTADj9$IBSRJf9jXxrzP1nFSeFeUqXv3UZpQGqjXdvPk3VYRuxKRuJR" +
		"QkGhqBRnQ1LoKDP$SR54oW$0RedGAFAd#cKnhQZRJlAwq2pZZawlmfjLw7Dv8AIgcTIBjWL" +
		"wFEJjCggpx6IeFuq$VztL#brqBsE$7ETE5AQBl#9yf$8xq5#3yQzWVmDr1y6pbRaM#5pN#W" +
		"aaAILEqZfb3APsdStOkn6z5sFT1tgrw6kqfiwINOBybkGtmGCH6mamHv3ssDeUnHutw3y3S" +
		"fl0VCjoFSMsbJw6EqVW$OQdIHRXFeYvEhVcboE$ikGNuOnb#bo6f9abwBjKkINOCmbA9kao" +
		"WvIk5rIFTqgfr4kh3w7tOVnzu7c7PJVHlbjb6z7VZlo6v2hT2FwRaJ#fKwCVONyA$HlqOcn" +
		"9vdwVz0BDWNv5BIjHhuQ#Rl8tqN#lau2YRFtK5Q$57TUBUbAdKHIQHfeLPgWasGBaJTasg2" +
		"JeDoaytMIx5pavwBF9AxJOfqacypK$vz1wjz$6OTS$Mkf6fqxR0RACr2UYtmkSlL$SPw3V3" +
		"upl#CQdSQZ7NTM$QjT7r5I9zdboDLPTXbodDYGk7hxZCJPIkGhaQkJscpa5rAwo2JE$mzPC" +
		"VhJ");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	public ErrorReporting errorReporting;
	public ArrayList<IndentHint> indentHints = new ArrayList<IndentHint>();


	private void addHint(IndentHint.Type type, int indentPos, int dedentPos)
	{
    	IndentHint hint1 = new IndentHint( type, true, indentPos );
    	IndentHint hint2 = new IndentHint( type, false, dedentPos );

    	hint1.counterpart = hint2;
    	hint2.counterpart = hint1;
    	indentHints.add(hint1);
    	indentHints.add(hint2);
    }

	private final Action[] actions;

	public OcamlFormatterParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = implementation
			RETURN2,	// [1] $goal = $interfaces interfaces; returns 'interfaces' although none is marked
			RETURN2,	// [2] $goal = $toplevel_phrase toplevel_phrase; returns 'toplevel_phrase' although none is marked
			RETURN2,	// [3] $goal = $use_file use_file; returns 'use_file' although none is marked
			new Action() {	// [4] implementation = structure.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					
    	return s;
				}
			},
			new Action() {	// [5] interfaces = signature.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					
    	return s;
				}
			},
			new Action() {	// [6] toplevel_phrase = top_structure.t SEMISEMI.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol t = _symbols[offset + 1];
					final Symbol s = _symbols[offset + 2];
					 return new Pos(t, s);
				}
			},
			new Action() {	// [7] toplevel_phrase = seq_expr.a SEMISEMI.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [8] toplevel_phrase = toplevel_directive.a SEMISEMI.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [9] top_structure = structure_item.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol i = _symbols[offset + 1];
					 return i;
				}
			},
			new Action() {	// [10] top_structure = structure_item.a top_structure.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a,b);
				}
			},
			new Action() {	// [11] use_file = use_file_tail.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [12] use_file = seq_expr.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a,b);
				}
			},
			new Action() {	// [13] use_file_tail = SEMISEMI.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return new Pos(s);
				}
			},
			new Action() {	// [14] use_file_tail = SEMISEMI.s seq_expr.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(s, b);
				}
			},
			new Action() {	// [15] use_file_tail = SEMISEMI.s structure_item.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(s, b);
				}
			},
			new Action() {	// [16] use_file_tail = SEMISEMI.s toplevel_directive.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(s, b);
				}
			},
			new Action() {	// [17] use_file_tail = structure_item.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [18] use_file_tail = toplevel_directive.a use_file_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [19] module_expr = mod_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [20] module_expr = STRUCT.s structure.b END.e
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.STRUCT, s.getEnd(), e.getStart());
    	return new Pos(s, e);
				}
			},
			new Action() {	// [21] module_expr = FUNCTOR.a LPAREN UIDENT.i COLON module_type RPAREN MINUSGREATER.c module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol i = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 7];
					final Symbol b = _symbols[offset + 8];
					
    	addHint(IndentHint.Type.FUNCTOR, b.getStart(), b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [22] module_expr = module_expr.a LPAREN module_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [23] module_expr = LPAREN.a module_expr COLON module_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [24] module_expr = LPAREN.a module_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [25] module_expr = LPAREN.a VAL expr COLON package_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [26] structure = structure_tail.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					
    	return s;
				}
			},
			new Action() {	// [27] structure = seq_expr.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [28] structure_tail = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [29] structure_tail = SEMISEMI.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return new Pos(s);
				}
			},
			new Action() {	// [30] structure_tail = SEMISEMI.a seq_expr.c structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [31] structure_tail = SEMISEMI.a structure_item.c structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [32] structure_tail = structure_item.a structure_tail.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [33] structure_item = LET.a rec_flag let_bindings.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [34] structure_item = EXTERNAL.a val_ident COLON core_type EQUAL.c primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.DEF, c.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [35] structure_item = TYPE.a type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [36] structure_item = EXCEPTION.a UIDENT.c constructor_arguments.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [37] structure_item = EXCEPTION.a UIDENT.id EQUAL.e constr_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [38] structure_item = MODULE.a UIDENT.id module_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [39] structure_item = MODULE.a REC module_rec_bindings.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [40] structure_item = MODULE.a TYPE ident.id EQUAL.e module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [41] structure_item = OPEN.a mod_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [42] structure_item = CLASS.a class_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [43] structure_item = CLASS.a TYPE class_type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [44] structure_item = INCLUDE.a module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [45] module_binding = EQUAL.a module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [46] module_binding = COLON.a module_type EQUAL.e module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [47] module_binding = LPAREN.a UIDENT COLON module_type RPAREN.c module_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
   		addHint(IndentHint.Type.MODULECONSTRAINT, a.getStart(), c.getEnd());
   		return new Pos(a, b);
				}
			},
			new Action() {	// [48] module_rec_bindings = module_rec_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [49] module_rec_bindings = module_rec_bindings.a AND module_rec_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [50] module_rec_binding = UIDENT.a COLON module_type EQUAL.e module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [51] module_type = mty_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [52] module_type = SIG.a signature.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.SIG, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [53] module_type = FUNCTOR.a LPAREN UIDENT COLON module_type RPAREN MINUSGREATER module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 8];
					
    	addHint(IndentHint.Type.FUNCTOR, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [54] module_type = module_type.a WITH.c with_constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [55] module_type = MODULE.a TYPE OF module_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [56] module_type = LPAREN.a module_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [57] signature = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [58] signature = signature.a signature_item.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [59] signature = signature.a signature_item.b SEMISEMI.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, c);
    	else
    		return new Pos(b, c);
				}
			},
			new Action() {	// [60] signature_item = VAL.a val_ident COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [61] signature_item = EXTERNAL.a val_ident COLON core_type EQUAL.e primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [62] signature_item = TYPE.a type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [63] signature_item = EXCEPTION.a UIDENT.c constructor_arguments.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [64] signature_item = MODULE.a UIDENT module_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [65] signature_item = MODULE.a REC module_rec_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [66] signature_item = MODULE.a TYPE ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [67] signature_item = MODULE.a TYPE ident.id EQUAL.e module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [68] signature_item = OPEN.a mod_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [69] signature_item = INCLUDE.a module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [70] signature_item = CLASS.a class_descriptions.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [71] signature_item = CLASS.a TYPE class_type_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [72] module_declaration = COLON.a module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [73] module_declaration = LPAREN.a UIDENT COLON module_type RPAREN module_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [74] module_rec_declarations = module_rec_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [75] module_rec_declarations = module_rec_declarations.a AND.n module_rec_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [76] module_rec_declaration = UIDENT.a COLON module_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [77] class_declarations = class_declarations.a AND class_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [78] class_declarations = class_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [79] class_declaration = virtual_flag.a class_type_parameters.c LIDENT class_fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [80] class_fun_binding = EQUAL.a class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [81] class_fun_binding = COLON.a class_type EQUAL.e class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [82] class_fun_binding = labeled_simple_pattern.a class_fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [83] class_type_parameters = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [84] class_type_parameters = LBRACKET.a type_parameter_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [85] class_fun_def = labeled_simple_pattern.a MINUSGREATER class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [86] class_fun_def = labeled_simple_pattern.a class_fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [87] class_expr = class_simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [88] class_expr = FUN.a class_fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [89] class_expr = class_simple_expr.a simple_labeled_expr_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [90] class_expr = LET.a rec_flag let_bindings IN class_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [91] class_simple_expr = LBRACKET.a core_type_comma_list RBRACKET class_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [92] class_simple_expr = class_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [93] class_simple_expr = OBJECT.a class_structure.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
		addHint(IndentHint.Type.OBJECT, a.getEnd() + 1, b.getStart());
		return new Pos(a, b);
				}
			},
			new Action() {	// [94] class_simple_expr = LPAREN.a class_expr COLON class_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [95] class_simple_expr = LPAREN.a class_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [96] class_structure = class_self_pattern.a class_fields.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return a;
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return b;
    	else
    		return Pos.NONE;
				}
			},
			new Action() {	// [97] class_self_pattern = LPAREN.a pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [98] class_self_pattern = LPAREN.a pattern COLON core_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [99] class_self_pattern = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [100] class_fields = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [101] class_fields = class_fields.a INHERIT.c override_flag class_expr.d parent_binder.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return new Pos(a, d);
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return new Pos(c, b);
    	else
    		return new Pos(c, d);
				}
			},
			new Action() {	// [102] class_fields = class_fields.a VAL.c virtual_value.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [103] class_fields = class_fields.a VAL.c value.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [104] class_fields = class_fields.a virtual_method.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [105] class_fields = class_fields.a concrete_method.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [106] class_fields = class_fields.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [107] class_fields = class_fields.a INITIALIZER.c seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [108] parent_binder = AS.a LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [109] parent_binder = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [110] virtual_value = override_flag.o MUTABLE.a VIRTUAL.c label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
    	if(o != Pos.NONE)
    		return new Pos(o, b);
    	else if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [111] virtual_value = VIRTUAL.a mutable_flag.m label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [112] value = override_flag.o mutable_flag.a label.c EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	if(o != Pos.NONE)
    		return new Pos(o, b);
    	else if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [113] value = override_flag.o mutable_flag.a label.c type_constraint EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol o = _symbols[offset + 1];
					final Symbol a = _symbols[offset + 2];
					final Symbol c = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());

    	if(o != Pos.NONE)
    		return new Pos(o, b);
    	else if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [114] virtual_method = METHOD.a override_flag PRIVATE VIRTUAL label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 7];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [115] virtual_method = METHOD.a override_flag VIRTUAL private_flag.p label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 4];
					final Symbol id = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 7];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [116] concrete_method = METHOD.a override_flag private_flag.p label.id strict_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 3];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [117] concrete_method = METHOD.a override_flag private_flag.p label.id COLON poly_type EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol p = _symbols[offset + 3];
					final Symbol id = _symbols[offset + 4];
					final Symbol e = _symbols[offset + 7];
					final Symbol b = _symbols[offset + 8];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [118] class_type = class_signature.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol s = _symbols[offset + 1];
					 return s;
				}
			},
			new Action() {	// [119] class_type = QUESTION.a LIDENT COLON simple_core_type_or_tuple MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [120] class_type = OPTLABEL.a simple_core_type_or_tuple MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [121] class_type = LIDENT.a COLON simple_core_type_or_tuple MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [122] class_type = simple_core_type_or_tuple.a MINUSGREATER class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [123] class_signature = LBRACKET.a core_type_comma_list RBRACKET clty_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [124] class_signature = clty_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [125] class_signature = OBJECT.a class_sig_body.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
		addHint(IndentHint.Type.OBJECT, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [126] class_sig_body = class_self_type.a class_sig_fields.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return a;
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return b;
    	else
    		return Pos.NONE;
				}
			},
			new Action() {	// [127] class_self_type = LPAREN.a core_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [128] class_self_type = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [129] class_sig_fields = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [130] class_sig_fields = class_sig_fields.a INHERIT.c class_signature.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE && b != Pos.NONE)
    		return new Pos(a, b);
    	else if(a != Pos.NONE && b == Pos.NONE)
    		return new Pos(a, c);
    	else if(a == Pos.NONE && b != Pos.NONE)
    		return new Pos(c, b);
    	else
    		return new Pos(c);
				}
			},
			new Action() {	// [131] class_sig_fields = class_sig_fields.a VAL.c value_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [132] class_sig_fields = class_sig_fields.a virtual_method_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [133] class_sig_fields = class_sig_fields.a method_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return b;
				}
			},
			new Action() {	// [134] class_sig_fields = class_sig_fields.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [135] value_type = VIRTUAL.a mutable_flag.m label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol m = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [136] value_type = MUTABLE.a virtual_flag label.id COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [137] value_type = label.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [138] method_type = METHOD.a private_flag label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [139] virtual_method_type = METHOD.a PRIVATE VIRTUAL label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [140] virtual_method_type = METHOD.a VIRTUAL private_flag label.id COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [141] constrain = core_type.a EQUAL.e core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [142] class_descriptions = class_descriptions.a AND.n class_description.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [143] class_descriptions = class_description.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [144] class_description = virtual_flag.a class_type_parameters.c LIDENT COLON class_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 5];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [145] class_type_declarations = class_type_declarations.a AND.n class_type_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [146] class_type_declarations = class_type_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [147] class_type_declaration = virtual_flag.a class_type_parameters.c LIDENT.id EQUAL.e class_signature.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol id = _symbols[offset + 3];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());

     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [148] seq_expr = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [149] seq_expr = expr.a SEMI.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [150] seq_expr = expr.a SEMI seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [151] labeled_simple_pattern = QUESTION.a LPAREN label_let_pattern opt_default RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [152] labeled_simple_pattern = QUESTION.a label_var.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [153] labeled_simple_pattern = OPTLABEL.a LPAREN let_pattern opt_default RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [154] labeled_simple_pattern = OPTLABEL.a pattern_var.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [155] labeled_simple_pattern = TILDE.a LPAREN label_let_pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [156] labeled_simple_pattern = TILDE.a label_var.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [157] labeled_simple_pattern = LABEL.a simple_pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [158] labeled_simple_pattern = simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [159] pattern_var = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [160] pattern_var = UNDERSCORE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [161] opt_default = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [162] opt_default = EQUAL.a seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [163] label_let_pattern = label_var.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [164] label_let_pattern = label_var.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [165] label_var = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return new Pos(a);
				}
			},
			new Action() {	// [166] let_pattern = pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [167] let_pattern = pattern.a COLON core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [168] expr = simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [169] expr = simple_expr.a simple_labeled_expr_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		addHint(IndentHint.Type.APP, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [170] expr = LET.a rec_flag let_bindings IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [171] expr = LET.a MODULE UIDENT.id module_binding IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [172] expr = LET.a OPEN mod_longident.id IN seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.IN, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [173] expr = FUNCTION.a opt_bar.c match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
	    if(c == Pos.NONE)
	    	addHint(IndentHint.Type.FIRST_MATCH_CASE, b.getStart(), b.getStart() + 1);
  		return new Pos(a, b);
				}
			},
			new Action() {	// [174] expr = FUN.a labeled_simple_pattern fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [175] expr = FUN.a LPAREN TYPE LIDENT.id RPAREN fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol id = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 6];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [176] expr = MATCH.a seq_expr WITH opt_bar.d match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol d = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	if(d == Pos.NONE){
	    	addHint(IndentHint.Type.WITH, b.getStart(), b.getEnd());
	    	addHint(IndentHint.Type.FIRST_MATCH_CASE, b.getStart(), b.getStart() + 1);
	    }
    	else
    		addHint(IndentHint.Type.WITH, d.getStart(), b.getEnd());

    	return new Pos(a, b);
				}
			},
			new Action() {	// [177] expr = TRY.a seq_expr.c WITH opt_bar.d match_cases.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.TRY, c.getStart(), c.getEnd());

    	if(d == Pos.NONE){
	    	addHint(IndentHint.Type.WITH, b.getStart(), b.getEnd());
	    	addHint(IndentHint.Type.FIRSTCATCH, b.getStart(), b.getStart() + 1);
	    }
    	else
    		addHint(IndentHint.Type.WITH, d.getStart(), b.getEnd());

    	return new Pos(a, b);
				}
			},
			new Action() {	// [178] expr = expr_comma_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [179] expr = constr_longident.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [180] expr = name_tag.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [181] expr = IF.a seq_expr THEN.t expr.c ELSE.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol t = _symbols[offset + 3];
					final Symbol c = _symbols[offset + 4];
					final Symbol e = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	addHint(IndentHint.Type.THEN, t.getEnd() + 1, c.getEnd());
    	addHint(IndentHint.Type.ELSE, e.getEnd() + 1, b.getEnd());

    	return new Pos(a, b);
				}
			},
			new Action() {	// [182] expr = IF.a seq_expr THEN.t expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol t = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.THEN, t.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [183] expr = WHILE.a seq_expr DO seq_expr.c DONE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.WHILE, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [184] expr = FOR.a val_ident EQUAL seq_expr direction_flag seq_expr DO seq_expr.c DONE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 8];
					final Symbol b = _symbols[offset + 9];
					
    	addHint(IndentHint.Type.FOR, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [185] expr = expr.a COLONCOLON expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [186] expr = LPAREN.a COLONCOLON RPAREN LPAREN expr COMMA expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 8];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [187] expr = expr.a INFIXOP0 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [188] expr = expr.a INFIXOP1 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [189] expr = expr.a INFIXOP2 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [190] expr = expr.a INFIXOP3 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [191] expr = expr.a INFIXOP4 expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [192] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [193] expr = expr.a PLUSDOT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [194] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [195] expr = expr.a MINUSDOT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [196] expr = expr.a STAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [197] expr = expr.a EQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [198] expr = expr.a LESS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [199] expr = expr.a GREATER expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [200] expr = expr.a OR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [201] expr = expr.a BARBAR expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [202] expr = expr.a AMPERSAND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [203] expr = expr.a AMPERAMPER expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [204] expr = expr.a COLONEQUAL expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [205] expr = subtractive expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [206] expr = additive expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return a;
				}
			},
			new Action() {	// [207] expr = simple_expr.a DOT label_longident LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [208] expr = simple_expr.a DOT LPAREN seq_expr RPAREN LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [209] expr = simple_expr.a DOT LBRACKET seq_expr RBRACKET LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [210] expr = simple_expr.a DOT LBRACE expr RBRACE LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					 return new Pos(a,b);
				}
			},
			new Action() {	// [211] expr = label.a LESSMINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [212] expr = ASSERT.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [213] expr = LAZY.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [214] expr = OBJECT.a class_structure.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
		addHint(IndentHint.Type.OBJECT, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [215] simple_expr = val_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [216] simple_expr = constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [217] simple_expr = constr_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [218] simple_expr = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [219] simple_expr = LPAREN.a seq_expr.c RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.PAREN, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [220] simple_expr = BEGIN.a seq_expr.c END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.BEGIN, a.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [221] simple_expr = BEGIN.a END.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [222] simple_expr = LPAREN.a seq_expr type_constraint RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [223] simple_expr = simple_expr.a DOT label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [224] simple_expr = mod_longident.a DOT LPAREN seq_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [225] simple_expr = simple_expr.a DOT LPAREN seq_expr RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [226] simple_expr = simple_expr.a DOT LBRACKET seq_expr RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [227] simple_expr = simple_expr.a DOT LBRACE expr RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [228] simple_expr = LBRACE.a record_expr.c RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.RECORD, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [229] simple_expr = LBRACKETBAR.a expr_semi_list opt_semi BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [230] simple_expr = LBRACKETBAR.a BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [231] simple_expr = LBRACKET.a expr_semi_list opt_semi RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [232] simple_expr = PREFIXOP.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [233] simple_expr = BANG.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [234] simple_expr = NEW.a class_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [235] simple_expr = LBRACELESS.a field_expr_list opt_semi GREATERRBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [236] simple_expr = LBRACELESS.a GREATERRBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [237] simple_expr = simple_expr.a SHARP label.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [238] simple_expr = LPAREN.a MODULE module_expr COLON package_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [239] simple_labeled_expr_list = labeled_simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [240] simple_labeled_expr_list = simple_labeled_expr_list.a labeled_simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [241] labeled_simple_expr = simple_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [242] labeled_simple_expr = label_expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [243] label_expr = LABEL.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [244] label_expr = TILDE.a label_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [245] label_expr = QUESTION.a label_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [246] label_expr = OPTLABEL.a simple_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [247] label_ident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return new Pos(a);
				}
			},
			new Action() {	// [248] let_bindings = let_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [249] let_bindings = let_bindings.a AND let_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [250] let_binding = val_ident.a fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [251] let_binding = val_ident.a COLON typevar_list DOT core_type EQUAL seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 7];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [252] let_binding = pattern.a EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [253] fun_binding = strict_binding.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [254] fun_binding = type_constraint.a EQUAL.e seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [255] strict_binding = EQUAL.a seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [256] strict_binding = labeled_simple_pattern.a fun_binding.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		addHint(IndentHint.Type.FUNARGS, a.getStart(), a.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [257] strict_binding = LPAREN.a TYPE LIDENT RPAREN.b fun_binding.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 5];
					
  		addHint(IndentHint.Type.FUNARGS, a.getStart(), b.getEnd());
  		return new Pos(a, c);
				}
			},
			new Action() {	// [258] match_cases = pattern.a match_action.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [259] match_cases = match_cases.a BAR pattern match_action.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [260] fun_def = match_action.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [261] fun_def = labeled_simple_pattern.a fun_def.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [262] fun_def = LPAREN.a TYPE LIDENT RPAREN.b fun_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					final Symbol c = _symbols[offset + 5];
					
  		addHint(IndentHint.Type.FUNARGS, a.getStart(), b.getEnd());
  		return new Pos(a, c);
				}
			},
			new Action() {	// [263] match_action = MINUSGREATER.a seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.MATCH_ACTION, b.getStart(), b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [264] match_action = WHEN.a seq_expr MINUSGREATER seq_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.MATCH_ACTION, b.getStart(), b.getEnd());
  		return new Pos(a, b);
				}
			},
			new Action() {	// [265] expr_comma_list = expr_comma_list.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [266] expr_comma_list = expr.a COMMA expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [267] record_expr = simple_expr.a WITH lbl_expr_list.c opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [268] record_expr = lbl_expr_list.a opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [269] lbl_expr_list = label_longident.a EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [270] lbl_expr_list = label_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [271] lbl_expr_list = lbl_expr_list.a SEMI label_longident EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a,b);
				}
			},
			new Action() {	// [272] lbl_expr_list = lbl_expr_list.a SEMI label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a,b);
				}
			},
			new Action() {	// [273] field_expr_list = label.a EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [274] field_expr_list = field_expr_list.a SEMI label EQUAL.e expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a,b);
				}
			},
			new Action() {	// [275] expr_semi_list = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [276] expr_semi_list = expr_semi_list.a SEMI expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [277] type_constraint = COLON.a core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [278] type_constraint = COLON.a core_type COLONGREATER core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [279] type_constraint = COLONGREATER.a core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [280] pattern = simple_pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [281] pattern = pattern.a AS val_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [282] pattern = pattern_comma_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [283] pattern = constr_longident.a pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [284] pattern = name_tag.a pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [285] pattern = pattern.a COLONCOLON pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [286] pattern = LPAREN.a COLONCOLON RPAREN LPAREN pattern COMMA pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 8];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [287] pattern = pattern.a BAR pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [288] pattern = LAZY.a simple_pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [289] simple_pattern = val_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [290] simple_pattern = UNDERSCORE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [291] simple_pattern = signed_constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [292] simple_pattern = CHAR.a DOTDOT CHAR.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [293] simple_pattern = constr_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [294] simple_pattern = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [295] simple_pattern = SHARP.a type_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [296] simple_pattern = LBRACE.a lbl_pattern_list.c record_pattern_end RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.RECORD, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [297] simple_pattern = LBRACKET.a pattern_semi_list opt_semi RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [298] simple_pattern = LBRACKETBAR.a pattern_semi_list opt_semi BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [299] simple_pattern = LBRACKETBAR.a BARRBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [300] simple_pattern = LPAREN.a pattern RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [301] simple_pattern = LPAREN.a pattern COLON core_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [302] pattern_comma_list = pattern_comma_list.a COMMA pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [303] pattern_comma_list = pattern.a COMMA pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [304] pattern_semi_list = pattern.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [305] pattern_semi_list = pattern_semi_list.a SEMI pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [306] lbl_pattern_list = label_longident.a EQUAL.e pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [307] lbl_pattern_list = label_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					
    	return a;
				}
			},
			new Action() {	// [308] lbl_pattern_list = lbl_pattern_list.a SEMI label_longident EQUAL.e pattern.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 4];
					final Symbol b = _symbols[offset + 5];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [309] lbl_pattern_list = lbl_pattern_list.a SEMI label_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					
    	return new Pos(a,b);
				}
			},
			new Action() {	// [310] record_pattern_end = opt_semi.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [311] record_pattern_end = SEMI.a UNDERSCORE.c opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [312] primitive_declaration = STRING.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [313] primitive_declaration = STRING.a primitive_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [314] type_declarations = type_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [315] type_declarations = type_declarations.a AND.n type_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol n = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
  		return new Pos(a, b);
				}
			},
			new Action() {	// [316] type_declaration = type_parameters.a LIDENT.c type_kind.d constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	Pos first;
    	Pos last;

    	if(a != Pos.NONE)
    		first = (Pos)a;
    	else
    		first = new Pos(c);

    	if(b != Pos.NONE)
    		last = (Pos)b;
    	else if(b == Pos.NONE && d != Pos.NONE)
    		last = (Pos)d;
    	else
    		last = new Pos(c);

    	if(first == last)
    		return first;
    	else
    		return new Pos(first, last);
				}
			},
			new Action() {	// [317] constraints = constraints.a CONSTRAINT.c constrain.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [318] constraints = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [319] type_kind = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [320] type_kind = EQUAL.a core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [321] type_kind = EQUAL.a PRIVATE.c core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
    	addHint(IndentHint.Type.DEF, c.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [322] type_kind = EQUAL.a constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
	    addHint(IndentHint.Type.FIRST_CONTRUCTOR, b.getStart(), b.getStart() + 1);
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [323] type_kind = EQUAL.a PRIVATE.c constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
	    addHint(IndentHint.Type.FIRST_CONTRUCTOR, b.getStart(), b.getStart() + 1);
    	addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [324] type_kind = EQUAL.a private_flag.c BAR.d constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
	    addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [325] type_kind = EQUAL.a private_flag.c LBRACE.d label_declarations opt_semi RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol d = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 6];
					
   		addHint(IndentHint.Type.DEF, a.getEnd() + 1, b.getEnd() + 1);
    	addHint(IndentHint.Type.RECORD, d.getEnd() + 1, b.getStart());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [326] type_kind = EQUAL.a core_type EQUAL.c private_flag opt_bar.o constructor_declarations.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 3];
					final Symbol o = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
    	if(o == Pos.NONE)
    		addHint(IndentHint.Type.FIRST_CONTRUCTOR, b.getStart(), b.getStart() + 1);

    	addHint(IndentHint.Type.DEF, c.getEnd() + 1, b.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [327] type_kind = EQUAL.a core_type.t EQUAL.e private_flag LBRACE.l label_declarations.c opt_semi RBRACE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol t = _symbols[offset + 2];
					final Symbol e = _symbols[offset + 3];
					final Symbol l = _symbols[offset + 5];
					final Symbol c = _symbols[offset + 6];
					final Symbol b = _symbols[offset + 8];
					
    	if(t == Pos.NONE)
    		addHint(IndentHint.Type.DEF, e.getEnd() + 1, l.getStart());
    	else
    		addHint(IndentHint.Type.DEF, t.getStart(), l.getStart());

    	addHint(IndentHint.Type.RECORD, c.getStart(), c.getEnd());
    	return new Pos(a, b);
				}
			},
			new Action() {	// [328] type_parameters = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [329] type_parameters = type_parameter.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [330] type_parameters = LPAREN.a type_parameter_list RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [331] type_parameter = type_variance.a QUOTE.c ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [332] type_variance = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [333] type_variance = PLUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [334] type_variance = MINUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [335] type_parameter_list = type_parameter.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [336] type_parameter_list = type_parameter_list.a COMMA type_parameter.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [337] constructor_declarations = constructor_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [338] constructor_declarations = constructor_declarations.a BAR constructor_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [339] constructor_declaration = constr_ident.a constructor_arguments.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [340] constructor_arguments = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [341] constructor_arguments = OF.a core_type_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [342] label_declarations = label_declaration.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [343] label_declarations = label_declarations.a SEMI label_declaration.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [344] label_declaration = mutable_flag.a label.c COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 4];
					
     	if(a != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(c, b);
				}
			},
			new Action() {	// [345] with_constraints = with_constraint.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [346] with_constraints = with_constraints.a AND with_constraint.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [347] with_constraint = TYPE.a type_parameters label_longident with_type_binder core_type.c constraints.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [348] with_constraint = TYPE.a type_parameters label_longident COLONEQUAL core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					
    	return new Pos(a, b);
				}
			},
			new Action() {	// [349] with_constraint = MODULE.a mod_longident EQUAL.e mod_ext_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol e = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
    	addHint(IndentHint.Type.DEF, e.getEnd() + 1, b.getEnd());
		return new Pos(a, b);
				}
			},
			new Action() {	// [350] with_constraint = MODULE.a mod_longident COLONEQUAL mod_ext_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					
		return new Pos(a, b);
				}
			},
			new Action() {	// [351] with_type_binder = EQUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [352] with_type_binder = EQUAL.a PRIVATE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [353] typevar_list = QUOTE.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [354] typevar_list = typevar_list.a QUOTE ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [355] poly_type = core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [356] poly_type = typevar_list.a DOT core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [357] core_type = core_type2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [358] core_type = core_type2.a AS QUOTE ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [359] core_type2 = simple_core_type_or_tuple.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [360] core_type2 = QUESTION.a LIDENT COLON core_type2 MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [361] core_type2 = OPTLABEL.a core_type2 MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [362] core_type2 = LIDENT.a COLON core_type2 MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [363] core_type2 = core_type2.a MINUSGREATER core_type2.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [364] simple_core_type = simple_core_type2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [365] simple_core_type = LPAREN.a core_type_comma_list RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [366] simple_core_type2 = QUOTE.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [367] simple_core_type2 = UNDERSCORE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [368] simple_core_type2 = type_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [369] simple_core_type2 = simple_core_type2.a type_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [370] simple_core_type2 = LPAREN.a core_type_comma_list RPAREN type_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [371] simple_core_type2 = LESS.a meth_list GREATER.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [372] simple_core_type2 = LESS.a GREATER.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [373] simple_core_type2 = SHARP.a class_longident.c opt_present.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [374] simple_core_type2 = simple_core_type2.a SHARP class_longident.c opt_present.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 3];
					final Symbol b = _symbols[offset + 4];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [375] simple_core_type2 = LPAREN.a core_type_comma_list RPAREN SHARP class_longident.c opt_present.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol c = _symbols[offset + 5];
					final Symbol b = _symbols[offset + 6];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return new Pos(a, c);
				}
			},
			new Action() {	// [376] simple_core_type2 = LBRACKET.a tag_field RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [377] simple_core_type2 = LBRACKET.a BAR row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [378] simple_core_type2 = LBRACKET.a row_field BAR row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 5];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [379] simple_core_type2 = LBRACKETGREATER.a opt_bar row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [380] simple_core_type2 = LBRACKETGREATER.a RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [381] simple_core_type2 = LBRACKETLESS.a opt_bar row_field_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [382] simple_core_type2 = LBRACKETLESS.a opt_bar row_field_list GREATER name_tag_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 6];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [383] simple_core_type2 = LPAREN.a MODULE package_type RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [384] package_type = mty_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [385] package_type = mty_longident.a WITH package_type_cstrs.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [386] package_type_cstr = TYPE.a LIDENT EQUAL core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [387] package_type_cstrs = package_type_cstr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [388] package_type_cstrs = package_type_cstr.a AND package_type_cstrs.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [389] row_field_list = row_field.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [390] row_field_list = row_field_list.a BAR row_field.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [391] row_field = tag_field.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [392] row_field = simple_core_type2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [393] tag_field = name_tag.a OF opt_ampersand amper_type_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [394] tag_field = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [395] opt_ampersand = AMPERSAND.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [396] opt_ampersand = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [397] amper_type_list = core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [398] amper_type_list = amper_type_list.a AMPERSAND core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [399] opt_present = LBRACKETGREATER.a name_tag_list RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [400] opt_present = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [401] name_tag_list = name_tag.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [402] name_tag_list = name_tag_list.a name_tag.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [403] simple_core_type_or_tuple = simple_core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [404] simple_core_type_or_tuple = simple_core_type.a STAR core_type_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [405] core_type_comma_list = core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [406] core_type_comma_list = core_type_comma_list.a COMMA core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [407] core_type_list = simple_core_type.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [408] core_type_list = core_type_list.a STAR simple_core_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [409] meth_list = field.a SEMI meth_list.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [410] meth_list = field.a opt_semi.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					
     	if(b != Pos.NONE)
    		return new Pos(a, b);
    	else
    		return a;
				}
			},
			new Action() {	// [411] meth_list = DOTDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [412] field = label.a COLON poly_type.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [413] label = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [414] constant = INT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [415] constant = CHAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [416] constant = STRING.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [417] constant = FLOAT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [418] constant = INT32.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [419] constant = INT64.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [420] constant = NATIVEINT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [421] signed_constant = constant.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [422] signed_constant = MINUS.a INT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [423] signed_constant = MINUS.a FLOAT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [424] signed_constant = MINUS.a INT32.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [425] signed_constant = MINUS.a INT64.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [426] signed_constant = MINUS.a NATIVEINT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [427] signed_constant = PLUS.a INT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [428] signed_constant = PLUS.a FLOAT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [429] signed_constant = PLUS.a INT32.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [430] signed_constant = PLUS.a INT64.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [431] signed_constant = PLUS.a NATIVEINT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [432] ident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [433] ident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [434] val_ident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [435] val_ident = LPAREN.a operator.o RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol o = _symbols[offset + 2];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [436] operator = PREFIXOP.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [437] operator = INFIXOP0.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [438] operator = INFIXOP1.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [439] operator = INFIXOP2.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [440] operator = INFIXOP3.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [441] operator = INFIXOP4.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [442] operator = BANG.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [443] operator = PLUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [444] operator = PLUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [445] operator = MINUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [446] operator = MINUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [447] operator = STAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [448] operator = EQUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [449] operator = LESS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [450] operator = GREATER.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [451] operator = OR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [452] operator = BARBAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [453] operator = AMPERSAND.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [454] operator = AMPERAMPER.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [455] operator = COLONEQUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [456] constr_ident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [457] constr_ident = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [458] constr_ident = COLONCOLON.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [459] constr_ident = FALSE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [460] constr_ident = TRUE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [461] val_longident = val_ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [462] val_longident = mod_longident.a DOT val_ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [463] constr_longident = mod_longident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [464] constr_longident = LBRACKET.a RBRACKET.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [465] constr_longident = LPAREN.a RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [466] constr_longident = FALSE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [467] constr_longident = TRUE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [468] label_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [469] label_longident = mod_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [470] type_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [471] type_longident = mod_ext_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [472] mod_longident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [473] mod_longident = mod_longident.a DOT UIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [474] mod_ext_longident = UIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [475] mod_ext_longident = mod_ext_longident.a DOT UIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [476] mod_ext_longident = mod_ext_longident.a LPAREN mod_ext_longident RPAREN.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 4];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [477] mty_longident = ident.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return a;
				}
			},
			new Action() {	// [478] mty_longident = mod_ext_longident.a DOT ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [479] clty_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [480] clty_longident = mod_ext_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [481] class_longident = LIDENT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [482] class_longident = mod_longident.a DOT LIDENT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [483] toplevel_directive = SHARP.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [484] toplevel_directive = SHARP.a ident STRING.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [485] toplevel_directive = SHARP.a ident INT.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [486] toplevel_directive = SHARP.a ident val_longident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [487] toplevel_directive = SHARP.a ident FALSE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [488] toplevel_directive = SHARP.a ident TRUE.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 3];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [489] name_tag = BACKQUOTE.a ident.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol b = _symbols[offset + 2];
					 return new Pos(a, b);
				}
			},
			new Action() {	// [490] rec_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [491] rec_flag = REC.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [492] direction_flag = TO.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [493] direction_flag = DOWNTO.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [494] private_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [495] private_flag = PRIVATE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [496] mutable_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [497] mutable_flag = MUTABLE.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [498] virtual_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [499] virtual_flag = VIRTUAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [500] override_flag = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [501] override_flag = BANG.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [502] opt_bar = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [503] opt_bar = BAR.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [504] opt_semi = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return Pos.NONE;
				}
			},
			new Action() {	// [505] opt_semi = SEMI.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [506] subtractive = MINUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [507] subtractive = MINUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [508] additive = PLUS.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			},
			new Action() {	// [509] additive = PLUSDOT.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Pos(a);
				}
			}
		};


	// override the default error reporting: do not print errors on stderr
	this.report = errorReporting = new ErrorReporting();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
